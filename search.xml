<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8.流程控制（一）——判断语句</title>
      <link href="2021/03/08/8-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/"/>
      <url>2021/03/08/8-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、流程控制"><a href="#一、流程控制" class="headerlink" title="一、流程控制"></a>一、流程控制</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程，而且很多时候我们要通过控制语句的执行顺序来实现要完成的功能。</p><h2 id="2、顺序结构"><a href="#2、顺序结构" class="headerlink" title="2、顺序结构"></a>2、顺序结构</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 顺序执行，按照编写的顺序，从上到下运行</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="二、判断语句"><a href="#二、判断语句" class="headerlink" title="二、判断语句"></a>二、判断语句</h1><h2 id="1、判断语句1——if"><a href="#1、判断语句1——if" class="headerlink" title="1、判断语句1——if"></a>1、判断语句1——if</h2><ul><li>if语句第一种格式: if</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句体<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体</li><li>如果是false就不执行语句体</li></ul></li></ul><p><img src="/images/5_Java_if.jpg" alt="1_Java_if"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单if语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01If</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前年龄为："</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"能否进入网吧？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前年龄符合法律规定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎进入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"emmm!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、判断语句2——if…else"><a href="#2、判断语句2——if…else" class="headerlink" title="2、判断语句2——if…else"></a>2、判断语句2——if…else</h2><ul><li>if语句第二种格式：if…else</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就执行语句体2</li></ul></li></ul><p><img src="/images/6_Java_if_else.jpg" alt="2_java_if_else"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// if-else语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02IfElse</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断奇数偶数</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、判断语句3——if…else-if-…else"><a href="#3、判断语句3——if…else-if-…else" class="headerlink" title="3、判断语句3——if…else if …else"></a>3、判断语句3——if…else if …else</h2><ul><li>if语句第三种格式: if…else if … else</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断语句n<span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    执行语句n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>执行流程</p><ul><li>首先判断关系表达式1其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句体2</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li><li>…</li><li>如果没有任何关系表达式为true，就执行语句体n+1</li></ul></li></ul><p>![3_Java_if_elseif_else](/images/7_Java_if_else if_else.jpg)</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// if_else if_else语句</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo31IfElseIFElse</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> y<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y的值是："</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h1 id="三、选择语句"><a href="#三、选择语句" class="headerlink" title="三、选择语句"></a>三、选择语句</h1><h2 id="1、选择语句——switch"><a href="#1、选择语句——switch" class="headerlink" title="1、选择语句——switch"></a>1、选择语句——switch</h2><ul><li>switch语句格式</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量值<span class="token number">1</span><span class="token operator">:</span>        语句体<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 常量值<span class="token number">2</span><span class="token operator">:</span>        语句体<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>首次计算出表达式的值</li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句部分，然后程序结束</li></ul></li></ul><p><img src="/images/8_Java_switch.jpg" alt="4_Java_switch"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// switch语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Switch</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据不合理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><ul><li>多个<code>case</code>后面的数值不可以相同</li><li>switch后面小括号当中只能是下列数据类型：<ul><li>基本数据类型：byte/short/char/int</li><li>引用数据类型：String字符串、enum枚举</li></ul></li><li><font color=red>switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略，即匹配到哪一个<code>case</code>就从哪一个位置向下执行，直到遇到<code>break</code>或者整体结束。</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// switch语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Switch</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// break;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据不合理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><blockquote><p>星期四<br>星期五</p></blockquote><h1 id="四、循环语句"><a href="#四、循环语句" class="headerlink" title="四、循环语句"></a>四、循环语句</h1><h2 id="1、循环概述"><a href="#1、循环概述" class="headerlink" title="1、循环概述"></a>1、循环概述</h2><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在适当的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去。</p><h2 id="2、循环语句1——for"><a href="#2、循环语句1——for" class="headerlink" title="2、循环语句1——for"></a>2、循环语句1——for</h2><ul><li>for循环语句格式</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式①<span class="token punctuation">;</span> 布尔表达式②<span class="token punctuation">;</span> 步进表达式④<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体③<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>执行流程：</p><ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环条件所涉及变量的变化情况</li></ul></li></ul><p><img src="/images/9_Java_for.jpg" alt="5_Java_for"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06For</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我错了，请原谅我吧->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、循环语句2——while"><a href="#3、循环语句2——while" class="headerlink" title="3、循环语句2——while"></a>3、循环语句2——while</h2><ul><li>while循环语句格式</li></ul><pre class=" language-java"><code class="language-java">初始化表达式①<span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体③    步进表达式④<span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环变量的变化情况</li></ul></li></ul><p><img src="/images/10_Java_sta_while.jpg" alt="6_Java_while"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07While</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我错了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、循环语句3——do…while"><a href="#4、循环语句3——do…while" class="headerlink" title="4、循环语句3——do…while"></a>4、循环语句3——do…while</h2><ul><li>do…while循环格式</li></ul><pre class=" language-java"><code class="language-java">初始化表达式①<span class="token keyword">do</span><span class="token punctuation">{</span>    循环体③    步进表达式④<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一定要注意这里有“;”</span></code></pre><ul><li>执行流程<ul><li>执行顺序：①③④&gt;②③④&gt;②③④…②不满足为止</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环变量的变化情况</li></ul></li></ul><p><img src="/images/11_Java_do_while.jpg" alt="7_Java_do_while"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08DOWhile</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原谅你了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OVER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、实例：求1-100之间的偶数和"><a href="#5、实例：求1-100之间的偶数和" class="headerlink" title="5、实例：求1-100之间的偶数和"></a>5、实例：求1-100之间的偶数和</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 求1-100之间的偶数和</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01If</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">forAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">whileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doWhileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OVER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">whileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doWhileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6、三种循环之间的区别"><a href="#6、三种循环之间的区别" class="headerlink" title="6、三种循环之间的区别"></a>6、三种循环之间的区别</h2><ul><li>如果条件判断从来没有满足过，那么<code>for</code>循环和<code>while</code>循环将会执行0次，但是<code>do-while</code>循环会至少执行一次</li><li><code>for</code>循环的变量在小括号中定义，只有循环内部才可以使用</li></ul><h2 id="7、循环控制"><a href="#7、循环控制" class="headerlink" title="7、循环控制"></a>7、循环控制</h2><h3 id="（1）break语句"><a href="#（1）break语句" class="headerlink" title="（1）break语句"></a>（1）break语句</h3><ul><li><p>break 关键字的用法有常见的两种：</p><ul><li>可以用在<code>switch</code>语句当中，一旦执行，整个<code>switch</code>语句立即结束</li><li>还可以用在循环语句当中，一旦执行，整个循环语句立即结束，打断循环</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环到第四次结束循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="（2）continue语句"><a href="#（2）continue语句" class="headerlink" title="（2）continue语句"></a>（2）continue语句</h3><ul><li><p>一旦执行，立刻跳过当前循环，继续循环剩余内容，马上开始下一次循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"层到了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="8、死循环"><a href="#8、死循环" class="headerlink" title="8、死循环"></a>8、死循环</h2><ul><li><p>标准格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span></code></pre></li></ul><h2 id="9、嵌套循环"><a href="#9、嵌套循环" class="headerlink" title="9、嵌套循环"></a>9、嵌套循环</h2><ul><li><p>所谓嵌套循环，是指一个循环的循环体是另一个循环，比如<code>for</code>循环里面还有个<code>for</code>循环，就是嵌套循环，总循环次数=外循环次数*内循环次数。</p></li><li><p>嵌套循环格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式①<span class="token punctuation">;</span> 布尔表达式②<span class="token punctuation">;</span> 步进表达式⑦<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式③<span class="token punctuation">;</span> 布尔表达式④<span class="token punctuation">;</span> 步进表达式⑥<span class="token punctuation">)</span><span class="token punctuation">{</span>        循环体⑤<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.查漏补缺——byte/short/char</title>
      <link href="2021/03/08/7-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E2%80%94%E2%80%94byte-short-char/"/>
      <url>2021/03/08/7-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E2%80%94%E2%80%94byte-short-char/</url>
      
        <content type="html"><![CDATA[<h1 id="一、byte-short-char隐式强制类型转换"><a href="#一、byte-short-char隐式强制类型转换" class="headerlink" title="一、byte/short/char隐式强制类型转换"></a>一、byte/short/char隐式强制类型转换</h1><ul><li>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地为我们补上一个(byte)(short)(char)</li><li>如果没有超过左侧变量范围，编译器补上强制类型转换</li><li>如果右侧的数值超过左侧变量范围，那么编译器直接报错</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Notice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 右侧确实是一个int类型的数值，但是没有超过左侧的范围，就是正确的写法</span>        <span class="token comment" spellcheck="true">// int --> byte, 不是自动类型转换</span>        <span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*(byte)*/</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// byte num2 = 128; // 右侧超过了左侧的范围</span>                <span class="token comment" spellcheck="true">// int --> char, 没有超过范围</span>        <span class="token comment" spellcheck="true">// 编译器将会自动补上一个隐含的(char)</span>        <span class="token keyword">char</span> zifu <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*(char)*/</span> <span class="token number">65</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zifu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二、编译器的常量优化"><a href="#二、编译器的常量优化" class="headerlink" title="二、编译器的常量优化"></a>二、编译器的常量优化</h1><p>在给变量进行赋值的时候，如果右侧的表达式当中全是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等号右边全是常量，没有任何变量参与运算</span></code></pre><p>编译之后，得到的<code>.class</code>字节码文件当中相当于【直接就是】:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> result <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></code></pre><p>右侧的常量结果数值，没有超过左侧范围，所以正确。</p><p>这称为“编译器的常量优化”</p><p><font color = red>但是注意，一旦表达式当中有变量参与，那么就不能进行这种优化了。</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Notice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">short</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确，没有超过范围</span>                <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// short + short --> int + int -->int</span>        <span class="token comment" spellcheck="true">//short result = a + b; // 错误写法，左侧需要int</span>                <span class="token comment" spellcheck="true">// 右侧不用变量，而且采用常量，而且只有两个常量，没有别人</span>        <span class="token keyword">short</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// short result2 = 5 + a + 8; // 18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.方法入门</title>
      <link href="2021/03/08/6-%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>2021/03/08/6-%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>我们在学习运算符的时候，都为每一个运算符单独创建一个新的类和main方法。我们会发现这样编写代码非常的繁琐，而且重复的代码过多，能否避免这样重复的代码呢？——需要使用方法来实现。</p><ul><li>方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li></ul><p>当我们需要使用这个功能的时候，就可以去调用，这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h1 id="二、方法的定义"><a href="#二、方法的定义" class="headerlink" title="二、方法的定义"></a>二、方法的定义</h1><ul><li>定义格式</li></ul><pre class=" language-java"><code class="language-java">修饰符 返回值类型 方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义格式解释<ul><li>修饰符：目前固定写法<code>public static</code></li><li>返回值类型：目前固定写法<code>void</code>，其他返回值类型在后面的课程讲解</li><li>方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法</li></ul></li><li>调用方法<ul><li>方法名称();</li></ul></li><li>注意事项<ul><li>方法定义的先后顺序无所谓</li><li><font color=red>方法的定义不能产生嵌套包含关系</font></li><li>方法定义好了之后，不会执行，如果要像执行，一定要进行方法的【调用】</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Function</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>        <span class="token function">getMax</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">:</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.运算符</title>
      <link href="2021/03/07/5-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/03/07/5-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符"></a>一、算数运算符</h1><table><thead><tr><th>算数运算符</th><th></th></tr></thead><tbody><tr><td><code>+</code></td><td>加法运算，字符串连接运算</td></tr><tr><td><code>-</code></td><td>减法运算</td></tr><tr><td><code>*</code></td><td>乘法运算</td></tr><tr><td><code>/</code></td><td>除法运算</td></tr><tr><td><code>%</code></td><td>取模运算，两个数字相除取余数</td></tr><tr><td><code>++</code>、<code>--</code></td><td>自增自减运算</td></tr></tbody></table><p>Java中，<strong>整数</strong>使用以上运算符，无论怎么计算，也不会得到小数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1000</span><span class="token punctuation">}</span></code></pre><h2 id="1、四则运算、取模"><a href="#1、四则运算、取模" class="headerlink" title="1、四则运算、取模"></a>1、四则运算、取模</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Operator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 两个常量之间进行数学运算</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 两个变量之间进行数学运算</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 常量和变量之间可以混合使用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res1 <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 只有对于整数来说，取模运算才有余数的意义</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、加号运算"><a href="#2、加号运算" class="headerlink" title="2、加号运算"></a>2、加号运算</h2><p>有关的三种用法：</p><ul><li>对数值来说，就是加法运算；</li><li>对字符char类型来说，再计算之前，char会被提升为int，然后再计算</li><li>对于字符串String(首字母大写，并不是关键字)来说，加号代表字符串连接操作</li></ul><h2 id="3、自增运算符（-）、自减运算符（–）"><a href="#3、自增运算符（-）、自减运算符（–）" class="headerlink" title="3、自增运算符（++）、自减运算符（–）"></a>3、自增运算符（++）、自减运算符（–）</h2><ul><li><p>基本含义：让一个变量涨一个数字1，或者让一个变量降一个数字1</p></li><li><p>使用格式：写在变量名称之前或者变量名称之后；例如：++num，num++</p></li><li><p>使用方式：</p><ul><li>单独使用：不和其他操作混合，自己独立成为一个步骤</li><li>混合使用：和其他操作混合使用，例如与赋值混合或者打印操作混合等</li></ul></li><li><p>使用区别：</p><ul><li><p>在单独使用的时候；n++ 和 ++n 没有任何区别；</p></li><li><p>混合使用的时候，有【重大区别】</p><p>A. 如果是【前++】，那么变量【马上+1】，然后拿着结果进行使用, <font color= red>先加后用</font></p><p>B.如果是【后++】，那么首先使用原来的值进行使用，然后再将变量+1, <font color= red>先用后加</font></p></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Operator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 单独使用, 前++</span>        <span class="token operator">++</span>num1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 单独使用，后++</span>        num1<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 与打印操作混合使用</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 混合使用，前++，变量立刻变成21，再打印</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 21</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 混合使用，后++，首先使用变量本来的值进行操作（打印30），然后变量+1得到31</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 31</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token operator">--</span>num4<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 39</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 39</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num5 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> num5<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 50</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 49</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res3 <span class="token operator">=</span> <span class="token operator">++</span>x <span class="token operator">+</span> y<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 31</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 19</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a><font color=red>4、注意事项</font></h2><ul><li>一旦运算当中有不同类型的数据，那么结果将会是数据类型范围大的那种。</li><li><font color=red>任何数据类型和字符串进行连接的时候，结果都会变成字符串</font></li><li><font color=red>只有变量才有自增自减运算操作</font></li></ul><h1 id="二、赋值运算符"><a href="#二、赋值运算符" class="headerlink" title="二、赋值运算符"></a>二、赋值运算符</h1><table><thead><tr><th>赋值运算符</th><th></th></tr></thead><tbody><tr><td><code>=</code></td><td>等于号</td></tr><tr><td><code>+=</code></td><td>加等于</td></tr><tr><td><code>-=</code></td><td>减等于</td></tr><tr><td><code>*=</code></td><td>乘等于</td></tr><tr><td><code>/=</code></td><td>除等于</td></tr><tr><td><code>%=</code></td><td>取模等</td></tr></tbody></table><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p>赋值运算符，就是将符号右边的值，赋值给左边的变量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算方式： i = i + 5;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、比较运算符</h1><table><thead><tr><th>比较运算符</th><th></th></tr></thead><tbody><tr><td><code>==</code></td><td>比较符号两边数据是否相等，相等结果为true</td></tr><tr><td><code>&lt;</code></td><td>比较符号左边的数据是否小于右边的数据，如果小于结果为true</td></tr><tr><td><code>&gt;</code></td><td>比较符号左边的数据是否大于右边的数据，如果大于结果为true</td></tr><tr><td><code>&lt;=</code></td><td>比较符号左边的数据是否小于或等于右边的数据，如果是结果为true</td></tr><tr><td><code>&gt;=</code></td><td>比较符号左边的数据是否大于或等于右边的数据，如果是结果为true</td></tr><tr><td><code>!=</code></td><td>不等于符号，如果符号两边的数据不相等，结果为true</td></tr></tbody></table><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><p>比较运算符，是两个数据之间进行比较的运算，运算的结果都是布尔值<code>true</code>或者<code>false</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><ul><li>比较运算符的结果一定是一个boolean值，成立就是true，不成立就是false</li><li>如果进行多次判断，不能连着写，例如： 1 &lt; x &lt; 3；错误的</li></ul><h1 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h1><h2 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h2><table><thead><tr><th>逻辑运算符</th><th></th></tr></thead><tbody><tr><td><code>&amp;&amp;</code> 短路与</td><td>1、两边都是true，结果为true<br />2、一边为false， 结果为false<br />短路特点：符号左边是false，右边不再运算</td></tr><tr><td>`</td><td></td></tr><tr><td><code>!</code>取反</td><td>1、!true 结果为false<br />2、!false 结果为true</td></tr></tbody></table><p>逻辑运算符：是用来连接两个布尔类型结果的运算符，运算结果都是布尔值<code>true</code>或者<code>false</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        与（并且） &amp;&amp;         或（或者） ||        非（取反） |                与“&amp;&amp;” , 或“||” 具有短路效果：如果根据左边已经可以判断得到最终结果，那么右边的代码        将不再执行，从而节省一定的性能        */</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//短路效果：如果根据左边已经可以判断得到最终结果，那么右边的代码</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false &amp;&amp; ..., 根据左边已经能够判断出结果，所以不需要执行右边的代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>a <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> b  <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true || ...</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token operator">++</span>b <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 20</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项-1"><a href="#2、注意事项-1" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><ul><li>逻辑运算符只能用于boolean值</li><li>与、或需要左右各一个boolean值，但是取反只有一个boolean值即可</li><li>与、或两种运算符，如果有多个条件，可以连续写<ul><li>两个条件：A &amp;&amp; B</li><li>多个条件：A &amp;&amp; B &amp;&amp; C</li></ul></li></ul><h1 id="五、三元运算符"><a href="#五、三元运算符" class="headerlink" title="五、三元运算符"></a>五、三元运算符</h1><h2 id="1、三元运算符格式"><a href="#1、三元运算符格式" class="headerlink" title="1、三元运算符格式"></a>1、三元运算符格式</h2><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> 布尔类型表达式<span class="token operator">?</span> 结果<span class="token number">1</span><span class="token operator">:</span> 结果<span class="token number">2</span></code></pre><h2 id="2、三元运算符计算方式"><a href="#2、三元运算符计算方式" class="headerlink" title="2、三元运算符计算方式"></a>2、三元运算符计算方式</h2><ul><li>布尔类型表达式结果为true，三元运算符整体结果为结果1，赋值给变量</li><li>布尔类型表达式结果为false，三元运算符整体结果为结果2，赋值给变量</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">:</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为： "</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3、注意实现"><a href="#3、注意实现" class="headerlink" title="3、注意实现"></a>3、注意实现</h2><ul><li>必须同时保证表达式A 和表达式B都符合左侧数据类型的要求</li><li>三元运算符的结果必须被使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.数据类型转换</title>
      <link href="2021/03/06/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/06/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Java程序中要求参与的计算的数据，必须要保证数据的一致性，如果数据类型不一致将会发生类型的转换</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01DataType</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是个整数， 默认为int类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是个浮点数，默认为double类型</span>                <span class="token comment" spellcheck="true">// 左边是long 类型，右边是默认的int 类型，左右不一样</span>        <span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="一、自动类型转换"><a href="#一、自动类型转换" class="headerlink" title="一、自动类型转换"></a>一、自动类型转换</h1><p>一个<code>int</code>类型变量和一个<code>byte</code>类型的变量进行加法运算，结果会是什么数据类型？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>运算结果，变量的类型将是<code>int</code>类型，这就是出现了数据类型的自动类型转换现象。</p><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><ul><li><strong>自动转换</strong>：将<code>取值范围小的类型</code>转换为<code>取值范围大的类型</code>。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// byte x = b + i; // 报错</span>    <span class="token comment" spellcheck="true">// int 类型和 byte 类型运算，结果是int 类型</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><ul><li><p>代码不需要进行特殊处理，自动完成。</p></li><li><p><font color = red>数据范围从小到大, 数据范围与其对应的字节数不成正相关，即字节数越大数据范围不一定越大</font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 左边是long类型，右边是默认的int 类型</span><span class="token comment" spellcheck="true">// 改行代码表示将int --> long, 符合了数据范围从小到大的要求</span><span class="token comment" spellcheck="true">// 这一行代码发生了自动类型转换</span><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左边是double类型，右边是float类型，左右不一样</span><span class="token comment" spellcheck="true">// float --> double ,符合从小到大的规则</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">2.5F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左边是float类型，右边是long类型</span><span class="token comment" spellcheck="true">// long --> float,范围float类型更大，符合从小到大的规则</span><span class="token comment" spellcheck="true">// 发生自动类型转换</span><span class="token keyword">float</span> num3 <span class="token operator">=</span> 30L<span class="token punctuation">;</span></code></pre></li></ul><h1 id="二、强制类型转换"><a href="#二、强制类型转换" class="headerlink" title="二、强制类型转换"></a>二、强制类型转换</h1><p>将<code>1.5</code>赋值给<code>int</code>类型变量会发生什么？<font color = red>产生编译失败，无法赋值</font></p><p><code>double</code>类型内存8个字节，<code>int</code>类型内存4个字节。<code>1.5</code>是<code>double</code>类型，取值范围大于<code>int</code>。可以理解为<code>double</code>是8升水，<code>int</code>是4升水，不能把大水壶中的水直接放到小水壶中去。</p><p>想要赋值成功，只有通过强制类型转换，将<code>double</code>类型强制转换为<code>int</code>类型才能赋值。</p><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><p>将<code>取值范围大的类型</code>强制转换成<code>取值范围小的类型</code>.</p><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们手动执行。    </p><ul><li><p>格式：</p><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>数据类型<span class="token punctuation">)</span> 被转数据值</code></pre></li></ul><h2 id="2、特点-1"><a href="#2、特点-1" class="headerlink" title="2、特点"></a>2、特点</h2><ul><li>代码需要进行特殊的格式处理，不能自动完成</li><li>格式：范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据 </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02DataType</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 左边是 int 类型, 右边默认是int 类型,不会发生类型转换</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 左边是 int 类型, 右边是 long类型</span>        <span class="token comment" spellcheck="true">// long --> int, 数据范围不是从小到大</span>        <span class="token comment" spellcheck="true">// 不能发生自动类型转换</span>        <span class="token comment" spellcheck="true">//int num2 = 100L;</span>        <span class="token comment" spellcheck="true">//System.out.println(num2);</span>                <span class="token comment" spellcheck="true">// 进行强制类型转换</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> 100L<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a><font color = red>3、注意事项</font></h2><h4 id="（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出"><a href="#（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出" class="headerlink" title="（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出"></a>（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出</h4><ul><li>数据溢出</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 情况一</span><span class="token comment" spellcheck="true">// 右边虽然是long类型，但是经过强制类型转换后变成int类型，但是100这个数值并没有超过int类型的范围</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> 100L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 情况二</span><span class="token comment" spellcheck="true">//在这种情况下，右边是60亿，而默认的整数类型是int，其最大范围是约21个亿，这里就本身会产生一个错误，所以需要在其后面加上一个L，此时左边 int， 右边是 long，需要强制类型转换</span><span class="token comment" spellcheck="true">// int num2 = 6000000000;</span><span class="token comment" spellcheck="true">// 此时long强制转换为int类型，但是60亿已经超过了int类型范围， 发生数据溢出</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> 6000000000L<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出为 1705032704</span></code></pre><ul><li>精度损失</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// double --> int, 强制类型转换</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">3.99</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出为3，不是四舍五入，所有小数位都会被舍弃掉</span></code></pre><h4 id="（2）、byte-short-char这三种类型都可以发生数学运算，例如加法”-”"><a href="#（2）、byte-short-char这三种类型都可以发生数学运算，例如加法”-”" class="headerlink" title="（2）、byte/short/char这三种类型都可以发生数学运算，例如加法”+”"></a>（2）、byte/short/char这三种类型都可以发生数学运算，例如加法”+”</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 66</span></code></pre><h4 id="（3）、byte-short-char这三种类型在运算的时候，都会被首先提升为int类型，然后再计算"><a href="#（3）、byte-short-char这三种类型在运算的时候，都会被首先提升为int类型，然后再计算" class="headerlink" title="（3）、byte/short/char这三种类型在运算的时候，都会被首先提升为int类型，然后再计算"></a>（3）、byte/short/char这三种类型在运算的时候，都会被首先提升为<code>int</code>类型，然后再计算</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> num3 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num4 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//byte + byte --> int + int --> int</span><span class="token comment" spellcheck="true">// byte res = num3 + num4; // 错误</span><span class="token keyword">int</span> res <span class="token operator">=</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">short</span> num6 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte + short --> int + int --> int</span><span class="token keyword">int</span> res1 <span class="token operator">=</span> num4 <span class="token operator">+</span> num6<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 强制类型转换</span><span class="token keyword">short</span> res2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num4 <span class="token operator">+</span> num6<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="（4）、boolean-类型不能发生数据类型转换"><a href="#（4）、boolean-类型不能发生数据类型转换" class="headerlink" title="（4）、boolean 类型不能发生数据类型转换"></a>（4）、boolean 类型不能发生数据类型转换</h4>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.常量、变量和数据类型</title>
      <link href="2021/03/05/3-%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/05/3-%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、常量"><a href="#一、常量" class="headerlink" title="一、常量"></a>一、常量</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>常量：是指在Java程序运行期间固定不变的数据</p><h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0， 1， 567， -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0， -0.1， 2.55</td></tr><tr><td>字符常量</td><td><font color=red>单引号引起来，只能写一个字符，必须有内容</font></td><td>‘a’, ‘ ‘, ‘好’</td></tr><tr><td>字符串常量</td><td><font color=red>双引号引起来，可以些多个字符，也可以不写</font></td><td>“A”, “Hello”, “你好”, “”</td></tr><tr><td>布尔常量</td><td>只有两个值</td><td>true, false</td></tr><tr><td>空常量</td><td>只有一个值</td><td>null</td></tr></tbody></table><h2 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01const</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XYZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 整数常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 小数常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(''); //两个单引号中间必须有且仅有一个字符，没有不行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 布尔常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// null</span>        <span class="token comment" spellcheck="true">// System.out.println(null);//空常量不能直接打印</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h1><h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><p>变量定义的格式包括三个要素：<code>数据类型</code>, <code>变量名</code>, <code>数据值</code>。</p><h2 id="2、格式"><a href="#2、格式" class="headerlink" title="2、格式"></a>2、格式</h2><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> 数据值<span class="token punctuation">;</span></code></pre><h2 id="3、实例-1"><a href="#3、实例-1" class="headerlink" title="3、实例"></a>3、实例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Variable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个变量</span>        <span class="token comment" spellcheck="true">// 格式： 数据类型 变量名</span>        <span class="token keyword">int</span> num1<span class="token punctuation">;</span>        num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 改变变量当中本来的数字</span>        num1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使用一步到位的格式来定义变量</span>        <span class="token comment" spellcheck="true">// 格式：数据类型 变量名称 = 数据值</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span> num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：右侧数值的范围不能超过左侧数据类型的范围</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// byte num4 = 400; // 右侧超出了byte的数据范围，错误</span>                <span class="token keyword">long</span> num4 <span class="token operator">=</span> 3000000000L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意整数默认的是int类型，如果需要long类型则需要加上L</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> num5 <span class="token operator">=</span> <span class="token number">2.5F</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h2><ul><li><p>如果创建多个变量，那么变量之间的名称不能重复</p></li><li><p>对于float和long类型来说，字母后缀F和L不能丢掉</p></li><li><p>如果使用byte或者short类型的变量，那么右侧的数据值范围不能超过左侧类型的范围</p></li><li><p>变量要先声明和赋值才能使用</p></li><li><p>变量的使用不能超过作用域的范围</p></li><li><p>可以通过一个语句来创建多个变量，但是一般情况不推荐这么写</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式二</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></code></pre></li></ul><p>这种写法也是可以的，一个程序有重复变量名。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03VariableNotice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> num2 <span class="token operator">=</span> 20L<span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h1><h2 id="1、数据类型分类："><a href="#1、数据类型分类：" class="headerlink" title="1、数据类型分类："></a>1、数据类型分类：</h2><p>Java的数据类型分为两大类：</p><ul><li>基本数据类型：包括 <code>整数</code>（byte, short, int, long）, <code>浮点数</code>(float, double), <code>字符</code>(char), <code>布尔</code>(boolean)。</li><li>引用数据类型：包括<code>字符串</code>、 <code>类</code>、<code>数组</code>、<code>接口</code>、Lambda。</li></ul><h2 id="2、基本数据类型"><a href="#2、基本数据类型" class="headerlink" title="2、基本数据类型"></a>2、基本数据类型</h2><p>四类八种基本数据类型：</p><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int(默认)</td><td>4个字节</td><td>-2^31 ~ 2^31 -1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2^63 ~ 2^63 - 1</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4013E-45 ~ 3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double(默认)</td><td>8个字节</td><td>4.9E-324 ~ 1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0~65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true, false</td></tr></tbody></table><blockquote><p>Java中的默认类型：整数类型是<code>int</code>， 浮点类型是<code>double</code>.</p></blockquote><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h2><ul><li><p>字符串不是基本类型，而是引用类型；</p></li><li><p>浮点型可能只是一个近似值，并非精确的值；</p></li><li><p>数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节</p></li><li><p>浮点数当中默认类型是double，如果一定要使用float类型，需要加上一个后缀F；</p><p>如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.HelloWorld入门程序</title>
      <link href="2021/03/04/2-HelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>2021/03/04/2-HelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、程序开发步骤说明"><a href="#一、程序开发步骤说明" class="headerlink" title="一、程序开发步骤说明"></a>一、程序开发步骤说明</h1><p>Java程序开发三步骤：<strong>编写、编译、运行</strong></p><p><img src="/images/3_Java_Develop_Step.jpg" alt="1_Java_Develop_Step"></p><h1 id="二、编写Java源程序"><a href="#二、编写Java源程序" class="headerlink" title="二、编写Java源程序"></a>二、编写Java源程序</h1><ol><li>在某一目录下（例如：D:\java_1）创建一个文本文件，将其完整的文件名修改为<strong>HelloWorld.java</strong> , 其中文件名位<strong>HelloWorld</strong>，后面的后缀名必须是    <strong>.java</strong> 。</li><li>用记事本打开。</li><li>在文件中键入文本并保存，代码如下：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>文件名必须是<strong>HelloWorld</strong>， 保证文件名和类的名字是一致的，注意大小写。</p></blockquote><p>第一个<strong>HelloWorld</strong> 源程序就编写好了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<strong>Java源文件</strong>编译成JVM可以看懂的<strong>字节码文件</strong>。</p><h1 id="三、编译Java源文件"><a href="#三、编译Java源文件" class="headerlink" title="三、编译Java源文件"></a>三、编译Java源文件</h1><p>在DOS命令行中，进入Java源文件，使用<strong>javac</strong>命令进行编译。</p><p>命令：</p><pre class=" language-bash"><code class="language-bash">javac Java源文件名.后缀名</code></pre><p>例如：</p><pre class=" language-bash"><code class="language-bash">javac HelloWorld.java</code></pre><p><img src="/images/4_Java_compile.jpg" alt="2_Java_compile"></p><p>编译成功后，命令行没有任何提示。打开其Java源文件目录，发现产生一个新的文件<strong>HelloWorld.class</strong>，该文件就是编译后的文件，是java的可运行文件，称为<font color = red size = 04>字节码文件</font>，有了字节码文件，就可以运行程序了。</p><blockquote><p>Java源文件的编译工具是 <strong>javac.exe</strong>.</p></blockquote><h1 id="四、运行Java程序"><a href="#四、运行Java程序" class="headerlink" title="四、运行Java程序"></a>四、运行Java程序</h1><p>在DOS命令行中，进入Java源文件的目录，使用<strong>java</strong>命令进行运行。</p><p>命令：</p><pre class=" language-bash"><code class="language-bash">java 类名字</code></pre><p>举例：</p><pre class=" language-bash"><code class="language-bash">java HelloWorld</code></pre><blockquote><p>上面命令中<font color=red size = 6> Java  HelloWorld 后面不要加.class</font></p><p>Java程序**.class** 文件的运行工具是<strong>java.exe</strong>,。</p></blockquote><h1 id="五、有关说明"><a href="#五、有关说明" class="headerlink" title="五、有关说明"></a>五、有关说明</h1><h2 id="1、编译和运行时两回事"><a href="#1、编译和运行时两回事" class="headerlink" title="1、编译和运行时两回事"></a>1、编译和运行时两回事</h2><ul><li>编译：是指将我们写的Java源文件翻译为JVM认识的class文件，在这个过程中，<strong>javac</strong>编译器会检查我们所写的程序是否有错误，有错误就提示出来，如果没有错误就会编译成功。</li><li>运行：是指将<strong>class文件</strong>交给JVM去运行，此时JVM就会执行我们编写的程序了。</li></ul><h2 id="2、有关main方法"><a href="#2、有关main方法" class="headerlink" title="2、有关main方法"></a>2、有关main方法</h2><ul><li>main方法：称为主方法，写法是固定格式不可以更改。main方法是程序的入口点或者起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始运行。</li></ul><h1 id="六、添加注释comment"><a href="#六、添加注释comment" class="headerlink" title="六、添加注释comment"></a>六、添加注释comment</h1><ul><li><p>注释：就是对代码的解释和说明，其目的是让人们能够更加轻松的了解代码，不影响程序的运行和编译。</p></li><li><p>Java中有单行注释和多行注释</p><p>​    $\nabla$ 单行注释以 <font color=orange><strong>//注释</strong> </font>，换行结束</p><p>​    $\nabla$ 多行注释以 <font color=orange><strong>/* 注释 */</strong> </font>，以*/* <em>开头吗，以</em> * <em>/</em>  结束</p></li></ul><h1 id="七、关键字keywords"><a href="#七、关键字keywords" class="headerlink" title="七、关键字keywords"></a>七、关键字keywords</h1><ul><li><p>关键字：是指程序中，Java已经定义好的单词，具有特殊含义。</p><p>​     $\nabla$ HelloWorld 案例中，出现的关键字有<strong>public</strong>、<strong>class</strong>、<strong>static</strong>、<strong>void</strong> 等，这些单词已经被Java定义好，全部都是小写字母。</p></li></ul><h1 id="八、标识符"><a href="#八、标识符" class="headerlink" title="八、标识符"></a><font color = red>八、标识符</font></h1><h2 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h2><ul><li>是指在程序中，我们自己定义内容。例如类的名字，方法的名字和变量的名字等等，都是标识符。</li></ul><h2 id="2、命名规则：硬性要求"><a href="#2、命名规则：硬性要求" class="headerlink" title="2、命名规则：硬性要求"></a><font color = red>2、命名规则：硬性要求</font></h2><ul><li>标识符可以包含英文字母26个（区分大小写）、0-9、$和_ </li><li>标识符不能以数字开头</li><li>标识符不能是关键字</li></ul><h2 id="3、命名规范：软性建议"><a href="#3、命名规范：软性建议" class="headerlink" title="3、命名规范：软性建议"></a><font color = red>3、命名规范：软性建议</font></h2><ul><li>类名规范：首字母大写，后面的每个单词首字母大写（大驼峰式）</li><li>方法名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li><li>变量名规范：全部小写</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Java语言开发环境</title>
      <link href="2021/03/04/1-Java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2021/03/04/1-Java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Java-虚拟机——JVM"><a href="#一、Java-虚拟机——JVM" class="headerlink" title="一、Java 虚拟机——JVM"></a>一、Java 虚拟机——JVM</h1><ul><li>JVM（Java Virtual Machine）：Java虚拟机，简称为JVM，是运行所有Javach程序的假象计算机，是Java程序的运行环境，是Java最具吸引力的特征之一。我们编写的Java代码，都运行在JVM之上。</li><li>跨平台：任何软件的运行，都必须要运行在操作系统上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特征。该特征由JVM实现，我们编写的程序运行在JVM上，而JVM运行在操作系统上。<img src="/images/1_JVM.jpg" alt="1_JVM"></li></ul><p>如同所示，Java的虚拟机本身不不具备跨平台性，每个操作系统都有不同版本的虚拟机。</p><h1 id="二、JRE和JDK"><a href="#二、JRE和JDK" class="headerlink" title="二、JRE和JDK"></a>二、JRE和JDK</h1><ul><li> JRE（Java Runtime Entironment）: 是Java程序的运行时环境，包括JVM和运行时所需要的核心类库。</li><li>JDK（Java Development Kit）：是Java程序开发工具包，包括JRE和开发人员使用的工具。</li></ul><p>我们想要运行一个已有的Java程序，那么需要安装 <em>JRE</em> 即可。</p><p>我们想要开发一个全新的Java程序，那么需要安装 <em>JDK</em>。</p><p>有关JVM，JRE，JDK三者的关系：</p><p><img src="/images/2_JVM_JRE_JDK.jpg" alt="2_JVM_JRE_JDK"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/03/hello-world/"/>
      <url>2021/03/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
