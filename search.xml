<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>14.Java_API Scanner</title>
      <link href="2021/03/11/14-Java-API-Scanner/"/>
      <url>2021/03/11/14-Java-API-Scanner/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是scanner类"><a href="#一、什么是scanner类" class="headerlink" title="一、什么是scanner类"></a>一、什么是scanner类</h1><p>一个可以解析基本类型和字符串的简单文本扫描器。例如，以下代码使用户能够从<code>System.in</code>中读取一个数：</p><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>备注：System.in 系统输入指的是通过键盘录入数据。</p></blockquote><h1 id="二、引用类型使用步骤"><a href="#二、引用类型使用步骤" class="headerlink" title="二、引用类型使用步骤"></a>二、引用类型使用步骤</h1><h2 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h2><p><font color= red>使用<code>import</code>关键字导包，在类的所有代码之前导包，引入要使用的类型，<code>java.lang</code>报下的所有类无需导入。</font>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> 包名<span class="token punctuation">.</span>类名<span class="token punctuation">;</span></code></pre><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span></code></pre><h2 id="2、创建对象"><a href="#2、创建对象" class="headerlink" title="2、创建对象"></a>2、创建对象</h2><p>使用该类的构造方法，创建一个该类的对象。格式：</p><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>举例：</p><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3、调用方法"><a href="#3、调用方法" class="headerlink" title="3、调用方法"></a>3、调用方法</h2><p>调用该类的成员方法，完成指定功能。格式：</p><pre class=" language-java"><code class="language-java">变量名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="三、Scanner使用步骤"><a href="#三、Scanner使用步骤" class="headerlink" title="三、Scanner使用步骤"></a>三、Scanner使用步骤</h1><h2 id="1、查看类"><a href="#1、查看类" class="headerlink" title="1、查看类"></a>1、查看类</h2><ul><li><code>java.util.Scanner</code>: 该类需要<code>import</code>导入后使用。</li></ul><h2 id="2、查看构造方法"><a href="#2、查看构造方法" class="headerlink" title="2、查看构造方法"></a>2、查看构造方法</h2><ul><li><code>public Scanner(InputStream source)</code>：构造一个新的<code>Scanner</code>，它生成的值是从指定的输入流扫面的。</li></ul><h2 id="3、查看成员方法"><a href="#3、查看成员方法" class="headerlink" title="3、查看成员方法"></a>3、查看成员方法</h2><ul><li><code>public int nextInt()</code>：将输入信息的下一个标记扫描为一个<code>int</code>值</li></ul><p>使用<code>Scanner</code>类，完成接受键盘录入数据的操作，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 导包</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Scanner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 创建键盘录入数据的对象</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 接收数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请录入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 输出数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i: "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、练习"><a href="#4、练习" class="headerlink" title="4、练习"></a>4、练习</h2><h3 id="1-、求和"><a href="#1-、求和" class="headerlink" title="(1)、求和"></a>(1)、求和</h3><p>键盘录入两个数据并求和，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02ScannerUse</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建对象</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接收数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对数据进行求和</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum: "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、匿名对象"><a href="#5、匿名对象" class="headerlink" title="5、匿名对象"></a>5、匿名对象</h2><h3 id="1-、概念"><a href="#1-、概念" class="headerlink" title="(1)、概念"></a>(1)、概念</h3><p>创建对象时，只有创建对象的语句，却没有把对象地址赋值给某个变量。虽然是创建对象的简化写法，但是应用场景非常有限。</p><ul><li>匿名对象：没有变量名的对象</li></ul><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 类型<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-、应用场景"><a href="#2-、应用场景" class="headerlink" title="(2)、应用场景"></a>(2)、应用场景</h3><h4 id="ⅰ-创建匿名对象直接调用方法，没有变量名"><a href="#ⅰ-创建匿名对象直接调用方法，没有变量名" class="headerlink" title="ⅰ. 创建匿名对象直接调用方法，没有变量名"></a>ⅰ. 创建匿名对象直接调用方法，没有变量名</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="ⅱ-一旦调用两次方法，就是创建了两个对象，造成浪费"><a href="#ⅱ-一旦调用两次方法，就是创建了两个对象，造成浪费" class="headerlink" title="ⅱ. 一旦调用两次方法，就是创建了两个对象，造成浪费"></a>ⅱ. 一旦调用两次方法，就是创建了两个对象，造成浪费</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>小贴士：一个匿名对象，只能使用一次</p></blockquote><h4 id="ⅲ-匿名对象可以作为方法的参数和返回值"><a href="#ⅲ-匿名对象可以作为方法的参数和返回值" class="headerlink" title="ⅲ. 匿名对象可以作为方法的参数和返回值"></a>ⅲ. 匿名对象可以作为方法的参数和返回值</h4><ul><li>作为参数</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 普通方式</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">input</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 匿名对象作为方法接收的参数</span>        <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span>Scanner sc<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>作为返回值</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 普通方法</span>        Scanner sc <span class="token operator">=</span> <span class="token function">getScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Scanner <span class="token function">getScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 普通方法</span>        <span class="token comment" spellcheck="true">// Scanner sc = new Scanner(System.in);</span>        <span class="token comment" spellcheck="true">// return sc;</span>                <span class="token comment" spellcheck="true">// 匿名对象作为方法返回值</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.面向对象特性——封装性</title>
      <link href="2021/03/11/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85%E6%80%A7/"/>
      <url>2021/03/11/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一、封装概述"><a href="#一、封装概述" class="headerlink" title="一、封装概述"></a>一、封装概述</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>面向对象编程语言是对客观事件的模拟，客观事件里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。封装可以被认为是一个保护屏障，防止该类代码和数据被其他类随意访问。要访问该类数据必须通过指定的方式。适当的封装可以让代码更容易理解和维护，也加强了代码的安全性。</p><h2 id="2、原则"><a href="#2、原则" class="headerlink" title="2、原则"></a>2、原则</h2><p>将<code>属性隐藏</code>起来，若要访问某个属性，<code>提供公共方法</code>对其访问。</p><h1 id="二、封装的步骤"><a href="#二、封装的步骤" class="headerlink" title="二、封装的步骤"></a>二、封装的步骤</h1><ul><li>使用<code>private</code>关键字来修饰成员变量</li><li>对需要访问的成员变量，提供对应的一对<code>getXxx</code>方法、<code>setXxx</code>方法</li></ul><h1 id="三、封装的操作——private关键字"><a href="#三、封装的操作——private关键字" class="headerlink" title="三、封装的操作——private关键字"></a>三、封装的操作——private关键字</h1><h2 id="1、private的含义"><a href="#1、private的含义" class="headerlink" title="1、private的含义"></a>1、private的含义</h2><ul><li><code>private</code>是一个权限修饰符，代表最小权限</li><li>可以修饰成员变量和成员方法</li><li><font color = red>被<code>private</code>修饰后的成员变量和成员方法，只在本类中才能被使用</font></li></ul><h2 id="2、private的使用格式"><a href="#2、private的使用格式" class="headerlink" title="2、private的使用格式"></a>2、private的使用格式</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> 数据类型 变量名<span class="token punctuation">;</span></code></pre><h3 id="1-、使用private修饰成员变量，代码如下："><a href="#1-、使用private修饰成员变量，代码如下：" class="headerlink" title="(1)、使用private修饰成员变量，代码如下："></a>(1)、使用<code>private</code>修饰成员变量，代码如下：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-、提供getXxx方法、setXxx方法，可以访问成员变量，代码如下："><a href="#2-、提供getXxx方法、setXxx方法，可以访问成员变量，代码如下：" class="headerlink" title="(2)、提供getXxx方法、setXxx方法，可以访问成员变量，代码如下："></a>(2)、提供<code>getXxx</code>方法、<code>setXxx</code>方法，可以访问成员变量，代码如下：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> male<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMale</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        male <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> male<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><font color = red>注意对基本类型的boolean，其中Getter方法要写成<code>isXxx</code>，Setter方法保持<code>setXxx</code>不变</font></p></blockquote><h1 id="四、封装优化1——this关键字"><a href="#四、封装优化1——this关键字" class="headerlink" title="四、封装优化1——this关键字"></a>四、封装优化1——this关键字</h1><p>如果在类的某些方法中，传进来的参数名称和成员变量名一致，那么输出的结果是否是我们想要的呢？代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>经过修改和测试，发现问题：成员变量赋值失效了，也就是说，在修改了<code>setXxx()</code>的形参变量名后，方法并没有给成员变量赋值，这是由于形参变量名和成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无法访问到成员变量，从而赋值失败。所以，我们只能使用<code>this</code>关键字，来解决这个重名的问题。</p><h2 id="1、this含义"><a href="#1、this含义" class="headerlink" title="1、this含义"></a>1、this含义</h2><p>this 代表所在类的当前对象的引用（地址值），即对象自己的引用。</p><blockquote><p>记住：方法被哪个对象调用，方法中的this就代表哪个对象。</p></blockquote><h2 id="2、this使用格式"><a href="#2、this使用格式" class="headerlink" title="2、this使用格式"></a>2、this使用格式</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>成员变量名<span class="token punctuation">;</span></code></pre><p>使用<code>this</code>修饰方法中的变量，解决成员变量被隐藏的问题，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="五、封装优化2——构造方法"><a href="#五、封装优化2——构造方法" class="headerlink" title="五、封装优化2——构造方法"></a>五、封装优化2——构造方法</h1><p>当一个对象被创建的时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</p><blockquote><p>小贴士：无论你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数的构造方法，一旦自己定义了构造方法，Java自动提供的默认无参数构造方法就会失效。</p></blockquote><h2 id="1、构造方法的定义格式"><a href="#1、构造方法的定义格式" class="headerlink" title="1、构造方法的定义格式"></a>1、构造方法的定义格式</h2><pre class=" language-java"><code class="language-java">修饰符 构造方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span></code></pre><p>构造方法的写法上，方法名和类名相同。它没有返回值，所以不需要返回值类型，甚至不需要void。使用构造方法后，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、<font color = red>注意事项</font></h2><ul><li>如果你不提供构造方法，系统会给出无参数构造方法</li><li>如果你提供了构造方法，系统将不再提供无参数构造方法</li><li>构造方法是可以重载的，既可以定义参数，也可以不定义参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.面向对象思想</title>
      <link href="2021/03/10/12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/"/>
      <url>2021/03/10/12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、面向对象思想概述"><a href="#一、面向对象思想概述" class="headerlink" title="一、面向对象思想概述"></a>一、面向对象思想概述</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。这里的<code>对象</code>泛指现实中一切事物，每种事物都具备自己的<code>属性</code>和<code>行为</code>。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。它区别于面向过程思想，强调的是调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p><h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了三大基本特性：即封装、继承和多态。</p><h1 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a>二、类和对象</h1><h2 id="1、什么是类"><a href="#1、什么是类" class="headerlink" title="1、什么是类"></a>1、什么是类</h2><ul><li>类：是一组相关<code>属性</code>和<code>行为</code>的集合，可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</li></ul><p>现实中，描述一类事物：</p><ul><li>属性：就是该事物的状态信息；</li><li>行为：就是该事物能够做什么；</li></ul><h2 id="2、什么是对象"><a href="#2、什么是对象" class="headerlink" title="2、什么是对象"></a>2、什么是对象</h2><ul><li>对象：是一类事物的具体体现。对象是类的一个<code>实例</code>，必然具备该类事物的属性和行为.</li></ul><h2 id="3、类与对象的关系"><a href="#3、类与对象的关系" class="headerlink" title="3、类与对象的关系"></a>3、类与对象的关系</h2><ul><li>类是对一类事物的描述，是抽象的</li><li>对象是一类事物的实例，是具体的</li><li>#类是对象的模板，对象是类的实体</li></ul><h1 id="三、类的定义"><a href="#三、类的定义" class="headerlink" title="三、类的定义"></a>三、类的定义</h1><h2 id="1、事物与类的对比"><a href="#1、事物与类的对比" class="headerlink" title="1、事物与类的对比"></a>1、事物与类的对比</h2><p>现实世界的一类事物：</p><ul><li>属性：事物的状态信息</li><li>行为：事物能够做什么</li></ul><p>Java中用class描述事物也是如此：</p><ul><li>成员变量：对应事物的属性</li><li>成员方法：对应事物的行为</li></ul><h1 id="四、对象的使用"><a href="#四、对象的使用" class="headerlink" title="四、对象的使用"></a>四、对象的使用</h1><h2 id="1、对象的使用格式"><a href="#1、对象的使用格式" class="headerlink" title="1、对象的使用格式"></a>1、对象的使用格式</h2><p>创建对象</p><pre class=" language-java"><code class="language-java">类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用对象访问类中的方法</p><pre class=" language-java"><code class="language-java">对象名<span class="token punctuation">.</span>成员变量<span class="token punctuation">;</span>对象名<span class="token punctuation">.</span>成员方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2、举例"><a href="#2、举例" class="headerlink" title="2、举例"></a>2、举例</h2><ul><li>创建<code>Student</code>类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo01<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//年龄</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭饭！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉觉！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>调用类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo01<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据Student类，创建一个名为stu的对象</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 改变对象当中的成员变量内容</span>        stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"XLL"</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用成员方法</span>        stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、成员变量的默认值"><a href="#3、成员变量的默认值" class="headerlink" title="3、成员变量的默认值"></a>3、成员变量的默认值</h2><p><img src="/images/18_Java_Default.jpg" alt="1_Java_Default_Value"></p><h2 id="4、创建一个Phone的对象并使用"><a href="#4、创建一个Phone的对象并使用" class="headerlink" title="4、创建一个Phone的对象并使用"></a>4、创建一个Phone的对象并使用</h2><ul><li>Phone.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String brand<span class="token punctuation">;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    String color<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给"</span> <span class="token operator">+</span> who <span class="token operator">+</span> <span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"群发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Demo01PhoneOne.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01PhoneOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据Phone创建对象</span>        Phone one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"苹果"</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">8388.0</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Lili"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="五、对象内存图"><a href="#五、对象内存图" class="headerlink" title="五、对象内存图"></a>五、对象内存图</h1><h2 id="1、一个对象调用一个方法的内存图"><a href="#1、一个对象调用一个方法的内存图" class="headerlink" title="1、一个对象调用一个方法的内存图"></a>1、一个对象调用一个方法的内存图</h2><p><img src="/images/19_Java_Object_Memory_1.jpg" alt="2_Java_One_Object_Memory"></p><blockquote><p>通过上图，我们可以理解，在栈内存中运行的方法，遵循给“先进后出，后进先出”的原则。</p></blockquote><h2 id="2、两个对象，调用同一个方法的内存图"><a href="#2、两个对象，调用同一个方法的内存图" class="headerlink" title="2、两个对象，调用同一个方法的内存图"></a>2、两个对象，调用同一个方法的内存图</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01PhoneTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据Phone创建对象</span>        Phone one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"苹果"</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">8388.0</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Lili"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 根据Phone创建对象</span>        Phone two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"三星"</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">5999.0</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"蓝色"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/images/20_Java_Object_Memory_2.jpg" alt="3_Java_Two_Object_Memory"></p><h2 id="3、两个引用指向同一个对象的内存图"><a href="#3、两个引用指向同一个对象的内存图" class="headerlink" title="3、两个引用指向同一个对象的内存图"></a>3、两个引用指向同一个对象的内存图</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02PhoneSame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据Phone创建对象</span>        Phone one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"苹果"</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">8388.0</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Lili"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将one当中保存的对象地址值赋值给two</span>        Phone two <span class="token operator">=</span> one<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"三星"</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">5999.0</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"蓝色"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/images/21_Java_Object_Memory_3.jpg" alt="4_Java_Two_Refence_Object_Memory"></p><h1 id="六、对象作为参数和返回值"><a href="#六、对象作为参数和返回值" class="headerlink" title="六、对象作为参数和返回值"></a>六、对象作为参数和返回值</h1><h2 id="1、对象作为参数"><a href="#1、对象作为参数" class="headerlink" title="1、对象作为参数"></a>1、对象作为参数</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Param</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"苹果"</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10099</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"玫瑰金"</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Phone param<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/images/22_Java_Object_Function_param.jpg" alt="5_Java_Object_param"></p><h2 id="2、对象作为返回值"><a href="#2、对象作为返回值" class="headerlink" title="2、对象作为返回值"></a>2、对象作为返回值</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day03<span class="token punctuation">.</span>Demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4PhoneReturn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone two <span class="token operator">=</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Phone <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Phone one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"苹果"</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">8388.0</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"玫瑰金"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> one<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/images/23_Java_Object_Return.jpg" alt="6_Java_Object_Return"></p><h1 id="七、成员变量和局部变量区别"><a href="#七、成员变量和局部变量区别" class="headerlink" title="七、成员变量和局部变量区别"></a>七、成员变量和局部变量区别</h1><ul><li>在类中的位置不同<code>重点</code><ul><li>成员变量：类中，方法外</li><li>局部变量：方法中或者方法声明上（形式参数）</li></ul></li><li>作用范围不一样<code>重点</code><ul><li>成员变量：类中</li><li>局部变量：方法中</li></ul></li><li>初始化值的不同<code>重点</code><ul><li>成员变量：有默认值</li><li>局部变量：没有默认值，必须先定义，赋值，最后使用</li></ul></li><li>在内存中的位置不同<code>了解</code><ul><li>成员变量：堆内存</li><li>局部变量：栈内存</li></ul></li><li>生命周期不同<ul><li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li><li>局部变量：随着方法的调用而调用，随着方法的调用完成而消失</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.数组进阶</title>
      <link href="2021/03/10/11-%E6%95%B0%E7%BB%84%E8%BF%9B%E9%98%B6/"/>
      <url>2021/03/10/11-%E6%95%B0%E7%BB%84%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数组原理内存图"><a href="#一、数组原理内存图" class="headerlink" title="一、数组原理内存图"></a>一、数组原理内存图</h1><h2 id="1、内存概述"><a href="#1、内存概述" class="headerlink" title="1、内存概述"></a>1、内存概述</h2><p>内存是计算机中的重要原件，临时存储区域，作用是运行程序，我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放在内存中才能运行，运行完毕后会清空内存。</p><p>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p><h2 id="2、Java虚拟机的内存划分"><a href="#2、Java虚拟机的内存划分" class="headerlink" title="2、Java虚拟机的内存划分"></a>2、Java虚拟机的内存划分</h2><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><ul><li>JVM的内存划分</li></ul><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，和开发无关</td></tr><tr><td>本体方法栈</td><td>JVM在使用操作系统功能的时候使用，和我们开发无关</td></tr><tr><td>方法区</td><td>存储可以运行的.class 文件</td></tr><tr><td>堆内存</td><td><font color=red>存储对象或数组，new来创建的，都存储在堆内存</font></td></tr><tr><td>方法栈</td><td><font color=red>方法运行时使用的内存</font>，比如main方法运行，进入方法栈中执行</td></tr></tbody></table><h2 id="3、数组在内存中的存储"><a href="#3、数组在内存中的存储" class="headerlink" title="3、数组在内存中的存储"></a>3、数组在内存中的存储</h2><h3 id="1-、一个数组内存图"><a href="#1-、一个数组内存图" class="headerlink" title="(1)、一个数组内存图"></a>(1)、一个数组内存图</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[I@7c30a502</span><span class="token punctuation">}</span></code></pre><p>以上方法执行，输出的结果是<code>[I@7c30a502</code>，这个是什么？是数组在内存中的地址，<code>new</code>出来的内容，都在堆内存中存储，二方法中的<code>arr</code>保存的是数组的地址。</p><p><strong>输出<code>arr[0]</code>，就会输出<code>arr</code>保存的内存地址中数组索引为0的元素。</strong></p><p>程序执行流程：</p><ul><li>1、<code>main</code>方法进入方法栈执行</li><li>2、创建数组，JVM会在堆内存中开辟空间，存储数组</li><li>3、数组在内存中会有自己的内存地址，以十六进制数表示</li><li>4、数组中有3个元素，默认值为0</li><li>5、JVM将数组的内存地址赋值给引用类型变量<code>arr</code></li><li>6、变量<code>arr</code>保存的是数组内存中的地址，而不是一个具体数值，因此称为引用数据类型</li></ul><p><img src="/images/13_Java_Memory_1.jpg" alt="1_Java_Memory"></p><h3 id="2-、两个数组内存图"><a href="#2-、两个数组内存图" class="headerlink" title="(2)、两个数组内存图"></a>(2)、两个数组内存图</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/14_Java_Memory_2.jpg" alt="2_Java_Memory"></p><h3 id="3-、两个变量指向一个数组"><a href="#3-、两个变量指向一个数组" class="headerlink" title="(3)、两个变量指向一个数组"></a>(3)、两个变量指向一个数组</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义数组。存储3个元素</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组索引进行赋值</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出元素值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义数组变量arr2，将arr的地址赋值arr2</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>    arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/15_Java_Memory_3.jpg" alt="3_Java_Memory"></p><h3 id="4-、举例"><a href="#4-、举例" class="headerlink" title="(4)、举例"></a>(4)、举例</h3><p><img src="/images/16_Java_Memory.jpg" alt="4_Java"></p><h1 id="二、数组的常见操作"><a href="#二、数组的常见操作" class="headerlink" title="二、数组的常见操作"></a>二、数组的常见操作</h1><h2 id="1、数组越界异常"><a href="#1、数组越界异常" class="headerlink" title="1、数组越界异常"></a>1、数组越界异常</h2><p>看下面代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建数组，赋值3个元素，数组的索引就是0， 1， 2，没有索引3，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出<code>ArrayIndexOutOfBoundsException</code>数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现，就需要修改代码。</p><h2 id="2、数组空指针异常"><a href="#2、数组空指针异常" class="headerlink" title="2、数组空指针异常"></a>2、数组空指针异常</h2><p>观察以下代码，运行后会出现什么结果。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    arr <span class="token operator">=</span> null<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>arr = null</code>这行代码，意味着变量<code>arr</code>将不会保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出<code>NullPointerException</code>空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现，就必须修改代码。</p><p>空指针在内存图中的表现</p><p><img src="/images/17_Java_NullPointer.jpg" alt="5_Java_NullPointer"></p><h2 id="3、数组遍历【重点】"><a href="#3、数组遍历【重点】" class="headerlink" title="3、数组遍历【重点】"></a>3、数组遍历【重点】</h2><ul><li>数组遍历：就是将数组中的每个元素都分别获取出来，就是遍历。遍历也是数组操作中的基石。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="4、数组获取最大值元素"><a href="#4、数组获取最大值元素" class="headerlink" title="4、数组获取最大值元素"></a>4、数组获取最大值元素</h2><ul><li>最大值获取：从数组的所有元素中找出最大值</li><li>实现思路：<ul><li>定义变量，保存数组索引0的元素A</li><li>遍历数组，获取出数组中的每个元素</li><li>将遍历到的元素和保存数组A进行比较</li><li>如果数组元素A的值大于遍历的元素值，就将A记为最大值，否则将遍历的值记为最大值</li><li>数组循环遍历结束，得到最大值</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="5、数组反转"><a href="#5、数组反转" class="headerlink" title="5、数组反转"></a>5、数组反转</h2><ul><li>数组反转：数组中的元素颠倒顺序</li><li>实现思路：数组最远端的元素互换位置（要求原地反转）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayReverseReplace</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、数组作为方法参数和返回值"><a href="#三、数组作为方法参数和返回值" class="headerlink" title="三、数组作为方法参数和返回值"></a>三、数组作为方法参数和返回值</h1><h2 id="1、数组作为方法参数"><a href="#1、数组作为方法参数" class="headerlink" title="1、数组作为方法参数"></a>1、数组作为方法参数</h2><p>以前的方法中学习了方法的参数和返回值，但是使用的都是基本数据类型，那么作为引用类型的数组能够作为方法的参数进行传递呢？当然可以！</p><ul><li><font color = red>数组作为方法参数传递，传递的参数都是数组内存的地址</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法，传递数组</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、数组作为方法返回值"><a href="#2、数组作为方法返回值" class="headerlink" title="2、数组作为方法返回值"></a>2、数组作为方法返回值</h2><ul><li><font color = red>数组作为方法的返回值，返回的是数组的内存地址</font></li><li><font color = red>一个方法可以有0、1、或多个参数，但是只能有0或1个返回值，不能有多个返回值, 如果希望一个方法当中产生多个结果的返回值，可以使用一个数组作为返回值类型即可</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用方法，接收数组的返回值</span>    <span class="token comment" spellcheck="true">//接受到的是数组的内存地址</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数："</span> <span class="token operator">+</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token punctuation">{</span>sum<span class="token punctuation">,</span> avg<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><font color =red> 总结：方法的参数为基本类型时，传递的是数据值，方法的参数为引用类型时，传递的是地址值.</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.数组入门</title>
      <link href="2021/03/10/10-%E6%95%B0%E7%BB%84/"/>
      <url>2021/03/10/10-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数组概念"><a href="#一、数组概念" class="headerlink" title="一、数组概念"></a>一、数组概念</h1><ul><li>数组：就是存储数据长度固定的容器，保证多个数据的数据类型要一致。</li></ul><h1 id="二、数组的定义"><a href="#二、数组的定义" class="headerlink" title="二、数组的定义"></a>二、数组的定义</h1><h2 id="1、方式一"><a href="#1、方式一" class="headerlink" title="1、方式一"></a>1、方式一</h2><ul><li>格式</li></ul><pre class=" language-java"><code class="language-java">数组存储的数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名称 <span class="token operator">=</span> <span class="token keyword">new</span> 数组存储的数据类型<span class="token punctuation">[</span>长度<span class="token punctuation">]</span></code></pre><ul><li>数据定义格式详解：<ul><li>数组存储的数据类型：创建的数组容器可以存储什么数据类型</li><li>[]：表示数组</li><li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组</li><li>new：关键字，创建数组使用的关键字</li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素</li><li><font color =red>注意：数组有定长特性，长度一旦指定，不可更改</font></li></ul></li><li>举例</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="2、方式二"><a href="#2、方式二" class="headerlink" title="2、方式二"></a>2、方式二</h2><ul><li>格式</li></ul><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span> 元素<span class="token number">2</span><span class="token punctuation">,</span> 元素<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li>举例</li></ul><p>定义存储1， 2， 3， 4， 5整数的数组容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="3、方式三"><a href="#3、方式三" class="headerlink" title="3、方式三"></a>3、方式三</h2><ul><li>格式</li></ul><pre class=" language-java"><code class="language-java">数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span> 元素<span class="token number">2</span><span class="token punctuation">,</span> 元素<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li>举例</li></ul><p>定义存储1， 2， 3， 4， 5整数的数组容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="三、数组的访问"><a href="#三、数组的访问" class="headerlink" title="三、数组的访问"></a>三、数组的访问</h1><ul><li>索引：每一个存储到数组的元素，都会自动的拥有一个编号，从<code>0</code>开始，这个自动编号称为数组索引<code>(index)</code>，通过数组的索引访问到数组中的元素</li><li>格式</li></ul><pre class=" language-java"><code class="language-java">数组名<span class="token punctuation">[</span>索引<span class="token punctuation">]</span></code></pre><ul><li>数组的长度属性：每个数组都具有长度，而且是固定的，Java中赋予数组的一个属性，可以获取数组的长度，语句是：<code>数组名.length</code>，属性<code>length</code>的执行结果是数组的长度，<code>int</code>类型结果。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>索引访问数组中的元素</p><ul><li>数组名[索引] = 数值，为数组中的元素赋值</li><li>变量 = 数组名[索引]，获取数组中的元素</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为0索引元素赋值为6</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数组0索引上的元素</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="四、数组的默认值"><a href="#四、数组的默认值" class="headerlink" title="四、数组的默认值"></a>四、数组的默认值</h1><p>使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值，规则如下:</p><ul><li>如果是整数类型，那么默认值为0;</li><li>如果是浮点类型，那么默认值为0.0;</li><li>如果是字符类型，那么默认值为’\u0000’;</li><li>如果是布尔类型，那么默认值为false;</li><li>如果是引用类型，那么默认值为null；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.方法进阶</title>
      <link href="2021/03/09/9-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6/"/>
      <url>2021/03/09/9-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、回顾——方法的定义和调用"><a href="#一、回顾——方法的定义和调用" class="headerlink" title="一、回顾——方法的定义和调用"></a>一、回顾——方法的定义和调用</h1><p>使用定义方法的方式在控制台来打印矩形。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method_Demo01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在该代码中，控制台打印出矩形就可以了，因此将方法定义为<code>void</code>，没有返回值。<code>print</code>方法被<code>main</code>方法调用后直接输出结果，而<code>main</code>方法并不需要<code>print</code>方法的执行结果，所以被定义为<code>void</code>。</p><h1 id="二、定义方法的格式详解"><a href="#二、定义方法的格式详解" class="headerlink" title="二、定义方法的格式详解"></a>二、定义方法的格式详解</h1><pre class=" language-java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代码省略...</span>    <span class="token keyword">return</span> 结果<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>修饰符：public static 固定写法</li><li>返回值类型： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者</li><li>参数列表：方法在运算过程中的未知数据，调用者调用方法时传递</li><li>return：将方法执行后的结果带给调用者，方法执行到<code>return</code>，整体方法运行结束</li></ul><blockquote><p>小贴士：return结果：这里的“结果”在开发中，我们正确的叫法称为方法的返回值</p></blockquote><h1 id="三、定义方法的两个明确"><a href="#三、定义方法的两个明确" class="headerlink" title="三、定义方法的两个明确"></a>三、定义方法的两个明确</h1><ul><li>需求：定义方法实现两个整数的求和计算<ul><li>明确返回值类型：方法计算的是整数的求和，结果必然是整数，返回值类型定义为<code>int</code>类型</li><li>明确参数列表：计算哪两个整数的和，并不清楚，但可以确定是整数，参数列表可以定义两个<code>int</code>类型的变量，由调用者调用方法时传递</li></ul></li></ul><h1 id="四、调用方法的流程图解"><a href="#四、调用方法的流程图解" class="headerlink" title="四、调用方法的流程图解"></a>四、调用方法的流程图解</h1><p><img src="/images/12_Java_function.jpg" alt="1_Java_function"></p><h1 id="五、定义方法的注意事项"><a href="#五、定义方法的注意事项" class="headerlink" title="五、定义方法的注意事项"></a>五、定义方法的注意事项</h1><ul><li>定义位置，类中方法外面</li><li>返回值类型，必须要和<code>return</code>语句返回的类型相同，否则编译失败</li><li>不能在<code>return</code>后面写代码，<code>return</code>意味着方法结束，所有后面的代码永远不会执行，属于无效代码</li></ul><h1 id="六、方法重载"><a href="#六、方法重载" class="headerlink" title="六、方法重载"></a>六、方法重载</h1><ul><li>方法重载：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关</li><li>参数列表：个数不同，数据类型不同，顺序不同</li><li>重载方法调用：JVM通过方法的参数列表，调用不同的方法</li></ul><h1 id="七、方法重载练习"><a href="#七、方法重载练习" class="headerlink" title="七、方法重载练习"></a>七、方法重载练习</h1><h3 id="1、练习"><a href="#1、练习" class="headerlink" title="1、练习"></a>1、练习</h3><p>比较两个数据是否相等，参数类型分别是两个<code>byte</code>类型，两个<code>short</code>类型，两个<code>int</code>类型，两个<code>long</code>类型，并在<code>main</code>方法中进行测试。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wolfwotz<span class="token punctuation">.</span>day01<span class="token punctuation">.</span>Demo04<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method_Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义不同数控类型的变量</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> g <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> h <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">byte</span> a<span class="token punctuation">,</span> <span class="token keyword">byte</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">short</span> a<span class="token punctuation">,</span> <span class="token keyword">short</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"short"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.流程控制</title>
      <link href="2021/03/08/8-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>2021/03/08/8-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、流程控制"><a href="#一、流程控制" class="headerlink" title="一、流程控制"></a>一、流程控制</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程，而且很多时候我们要通过控制语句的执行顺序来实现要完成的功能。</p><h2 id="2、顺序结构"><a href="#2、顺序结构" class="headerlink" title="2、顺序结构"></a>2、顺序结构</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 顺序执行，按照编写的顺序，从上到下运行</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="二、判断语句"><a href="#二、判断语句" class="headerlink" title="二、判断语句"></a>二、判断语句</h1><h2 id="1、判断语句1——if"><a href="#1、判断语句1——if" class="headerlink" title="1、判断语句1——if"></a>1、判断语句1——if</h2><ul><li>if语句第一种格式: if</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句体<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体</li><li>如果是false就不执行语句体</li></ul></li></ul><p><img src="/images/5_Java_if.jpg" alt="1_Java_if"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单if语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01If</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前年龄为："</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"能否进入网吧？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前年龄符合法律规定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎进入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"emmm!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、判断语句2——if…else"><a href="#2、判断语句2——if…else" class="headerlink" title="2、判断语句2——if…else"></a>2、判断语句2——if…else</h2><ul><li>if语句第二种格式：if…else</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就执行语句体2</li></ul></li></ul><p><img src="/images/6_Java_if_else.jpg" alt="2_java_if_else"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// if-else语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02IfElse</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断奇数偶数</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、判断语句3——if…else-if-…else"><a href="#3、判断语句3——if…else-if-…else" class="headerlink" title="3、判断语句3——if…else if …else"></a>3、判断语句3——if…else if …else</h2><ul><li>if语句第三种格式: if…else if … else</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断条件<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断语句n<span class="token punctuation">)</span><span class="token punctuation">{</span>    执行语句n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    执行语句n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>执行流程</p><ul><li>首先判断关系表达式1其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句体2</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li><li>…</li><li>如果没有任何关系表达式为true，就执行语句体n+1</li></ul></li></ul><p><img src="/images/7_Java_if_elseif_else.jpg" alt="3_Java_if_elseif_else"></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// if_else if_else语句</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo31IfElseIFElse</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> y<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y的值是："</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h1 id="三、选择语句"><a href="#三、选择语句" class="headerlink" title="三、选择语句"></a>三、选择语句</h1><h2 id="1、选择语句——switch"><a href="#1、选择语句——switch" class="headerlink" title="1、选择语句——switch"></a>1、选择语句——switch</h2><ul><li>switch语句格式</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量值<span class="token number">1</span><span class="token operator">:</span>        语句体<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 常量值<span class="token number">2</span><span class="token operator">:</span>        语句体<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>首次计算出表达式的值</li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句部分，然后程序结束</li></ul></li></ul><p><img src="/images/8_Java_switch.jpg" alt="4_Java_switch"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// switch语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Switch</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据不合理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><ul><li>多个<code>case</code>后面的数值不可以相同</li><li>switch后面小括号当中只能是下列数据类型：<ul><li>基本数据类型：byte/short/char/int</li><li>引用数据类型：String字符串、enum枚举</li></ul></li><li><font color=red>switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略，即匹配到哪一个<code>case</code>就从哪一个位置向下执行，直到遇到<code>break</code>或者整体结束。</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// switch语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Switch</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// break;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据不合理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><blockquote><p>星期四<br>星期五</p></blockquote><h1 id="四、循环语句"><a href="#四、循环语句" class="headerlink" title="四、循环语句"></a>四、循环语句</h1><h2 id="1、循环概述"><a href="#1、循环概述" class="headerlink" title="1、循环概述"></a>1、循环概述</h2><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在适当的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去。</p><h2 id="2、循环语句1——for"><a href="#2、循环语句1——for" class="headerlink" title="2、循环语句1——for"></a>2、循环语句1——for</h2><ul><li>for循环语句格式</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式①<span class="token punctuation">;</span> 布尔表达式②<span class="token punctuation">;</span> 步进表达式④<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体③<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>执行流程：</p><ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环条件所涉及变量的变化情况</li></ul></li></ul><p><img src="/images/9_Java_for.jpg" alt="5_Java_for"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06For</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我错了，请原谅我吧->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、循环语句2——while"><a href="#3、循环语句2——while" class="headerlink" title="3、循环语句2——while"></a>3、循环语句2——while</h2><ul><li>while循环语句格式</li></ul><pre class=" language-java"><code class="language-java">初始化表达式①<span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体③    步进表达式④<span class="token punctuation">}</span></code></pre><ul><li>执行流程<ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环变量的变化情况</li></ul></li></ul><p><img src="/images/10_Java_sta_while.jpg" alt="6_Java_while"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07While</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我错了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、循环语句3——do…while"><a href="#4、循环语句3——do…while" class="headerlink" title="4、循环语句3——do…while"></a>4、循环语句3——do…while</h2><ul><li>do…while循环格式</li></ul><pre class=" language-java"><code class="language-java">初始化表达式①<span class="token keyword">do</span><span class="token punctuation">{</span>    循环体③    步进表达式④<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式②<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一定要注意这里有“;”</span></code></pre><ul><li>执行流程<ul><li>执行顺序：①③④&gt;②③④&gt;②③④…②不满足为止</li><li>①负责完成循环变量初始化</li><li>②负责判断是否满足循环条件，不满足则跳出循环</li><li>③具体执行的语句</li><li>④循环后，循环变量的变化情况</li></ul></li></ul><p><img src="/images/11_Java_do_while.jpg" alt="7_Java_do_while"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08DOWhile</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原谅你了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OVER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、实例：求1-100之间的偶数和"><a href="#5、实例：求1-100之间的偶数和" class="headerlink" title="5、实例：求1-100之间的偶数和"></a>5、实例：求1-100之间的偶数和</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 求1-100之间的偶数和</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01If</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">forAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">whileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doWhileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OVER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">whileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doWhileAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-100之间的偶数和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6、三种循环之间的区别"><a href="#6、三种循环之间的区别" class="headerlink" title="6、三种循环之间的区别"></a>6、三种循环之间的区别</h2><ul><li>如果条件判断从来没有满足过，那么<code>for</code>循环和<code>while</code>循环将会执行0次，但是<code>do-while</code>循环会至少执行一次</li><li><code>for</code>循环的变量在小括号中定义，只有循环内部才可以使用</li></ul><h2 id="7、循环控制"><a href="#7、循环控制" class="headerlink" title="7、循环控制"></a>7、循环控制</h2><h3 id="（1）break语句"><a href="#（1）break语句" class="headerlink" title="（1）break语句"></a>（1）break语句</h3><ul><li><p>break 关键字的用法有常见的两种：</p><ul><li>可以用在<code>switch</code>语句当中，一旦执行，整个<code>switch</code>语句立即结束</li><li>还可以用在循环语句当中，一旦执行，整个循环语句立即结束，打断循环</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环到第四次结束循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="（2）continue语句"><a href="#（2）continue语句" class="headerlink" title="（2）continue语句"></a>（2）continue语句</h3><ul><li><p>一旦执行，立刻跳过当前循环，继续循环剩余内容，马上开始下一次循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"层到了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="8、死循环"><a href="#8、死循环" class="headerlink" title="8、死循环"></a>8、死循环</h2><ul><li><p>标准格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span></code></pre></li></ul><h2 id="9、嵌套循环"><a href="#9、嵌套循环" class="headerlink" title="9、嵌套循环"></a>9、嵌套循环</h2><ul><li><p>所谓嵌套循环，是指一个循环的循环体是另一个循环，比如<code>for</code>循环里面还有个<code>for</code>循环，就是嵌套循环，总循环次数=外循环次数*内循环次数。</p></li><li><p>嵌套循环格式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式①<span class="token punctuation">;</span> 布尔表达式②<span class="token punctuation">;</span> 步进表达式⑦<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式③<span class="token punctuation">;</span> 布尔表达式④<span class="token punctuation">;</span> 步进表达式⑥<span class="token punctuation">)</span><span class="token punctuation">{</span>        循环体⑤<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.查漏补缺——byte/short/char</title>
      <link href="2021/03/08/7-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E2%80%94%E2%80%94byte-short-char/"/>
      <url>2021/03/08/7-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E2%80%94%E2%80%94byte-short-char/</url>
      
        <content type="html"><![CDATA[<h1 id="一、byte-short-char隐式强制类型转换"><a href="#一、byte-short-char隐式强制类型转换" class="headerlink" title="一、byte/short/char隐式强制类型转换"></a>一、byte/short/char隐式强制类型转换</h1><ul><li>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地为我们补上一个(byte)(short)(char)</li><li>如果没有超过左侧变量范围，编译器补上强制类型转换</li><li>如果右侧的数值超过左侧变量范围，那么编译器直接报错</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Notice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 右侧确实是一个int类型的数值，但是没有超过左侧的范围，就是正确的写法</span>        <span class="token comment" spellcheck="true">// int --> byte, 不是自动类型转换</span>        <span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*(byte)*/</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// byte num2 = 128; // 右侧超过了左侧的范围</span>                <span class="token comment" spellcheck="true">// int --> char, 没有超过范围</span>        <span class="token comment" spellcheck="true">// 编译器将会自动补上一个隐含的(char)</span>        <span class="token keyword">char</span> zifu <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*(char)*/</span> <span class="token number">65</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zifu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二、编译器的常量优化"><a href="#二、编译器的常量优化" class="headerlink" title="二、编译器的常量优化"></a>二、编译器的常量优化</h1><p>在给变量进行赋值的时候，如果右侧的表达式当中全是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等号右边全是常量，没有任何变量参与运算</span></code></pre><p>编译之后，得到的<code>.class</code>字节码文件当中相当于【直接就是】:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> result <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></code></pre><p>右侧的常量结果数值，没有超过左侧范围，所以正确。</p><p>这称为“编译器的常量优化”</p><p><font color = red>但是注意，一旦表达式当中有变量参与，那么就不能进行这种优化了。</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Notice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">short</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确，没有超过范围</span>                <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// short + short --> int + int -->int</span>        <span class="token comment" spellcheck="true">//short result = a + b; // 错误写法，左侧需要int</span>                <span class="token comment" spellcheck="true">// 右侧不用变量，而且采用常量，而且只有两个常量，没有别人</span>        <span class="token keyword">short</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// short result2 = 5 + a + 8; // 18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.方法入门</title>
      <link href="2021/03/08/6-%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>2021/03/08/6-%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>我们在学习运算符的时候，都为每一个运算符单独创建一个新的类和main方法。我们会发现这样编写代码非常的繁琐，而且重复的代码过多，能否避免这样重复的代码呢？——需要使用方法来实现。</p><ul><li>方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li></ul><p>当我们需要使用这个功能的时候，就可以去调用，这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h1 id="二、方法的定义"><a href="#二、方法的定义" class="headerlink" title="二、方法的定义"></a>二、方法的定义</h1><ul><li>定义格式</li></ul><pre class=" language-java"><code class="language-java">修饰符 返回值类型 方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义格式解释<ul><li>修饰符：目前固定写法<code>public static</code></li><li>返回值类型：目前固定写法<code>void</code>，其他返回值类型在后面的课程讲解</li><li>方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法</li></ul></li><li>调用方法<ul><li>方法名称();</li></ul></li><li>注意事项<ul><li>方法定义的先后顺序无所谓</li><li><font color=red>方法的定义不能产生嵌套包含关系</font></li><li>方法定义好了之后，不会执行，如果要像执行，一定要进行方法的【调用】</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Function</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>        <span class="token function">getMax</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">:</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.运算符</title>
      <link href="2021/03/07/5-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/03/07/5-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符"></a>一、算数运算符</h1><table><thead><tr><th>算数运算符</th><th></th></tr></thead><tbody><tr><td><code>+</code></td><td>加法运算，字符串连接运算</td></tr><tr><td><code>-</code></td><td>减法运算</td></tr><tr><td><code>*</code></td><td>乘法运算</td></tr><tr><td><code>/</code></td><td>除法运算</td></tr><tr><td><code>%</code></td><td>取模运算，两个数字相除取余数</td></tr><tr><td><code>++</code>、<code>--</code></td><td>自增自减运算</td></tr></tbody></table><p>Java中，<strong>整数</strong>使用以上运算符，无论怎么计算，也不会得到小数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1000</span><span class="token punctuation">}</span></code></pre><h2 id="1、四则运算、取模"><a href="#1、四则运算、取模" class="headerlink" title="1、四则运算、取模"></a>1、四则运算、取模</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Operator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 两个常量之间进行数学运算</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 两个变量之间进行数学运算</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 常量和变量之间可以混合使用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res1 <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 只有对于整数来说，取模运算才有余数的意义</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、加号运算"><a href="#2、加号运算" class="headerlink" title="2、加号运算"></a>2、加号运算</h2><p>有关的三种用法：</p><ul><li>对数值来说，就是加法运算；</li><li>对字符char类型来说，再计算之前，char会被提升为int，然后再计算</li><li>对于字符串String(首字母大写，并不是关键字)来说，加号代表字符串连接操作</li></ul><h2 id="3、自增运算符（-）、自减运算符（–）"><a href="#3、自增运算符（-）、自减运算符（–）" class="headerlink" title="3、自增运算符（++）、自减运算符（–）"></a>3、自增运算符（++）、自减运算符（–）</h2><ul><li><p>基本含义：让一个变量涨一个数字1，或者让一个变量降一个数字1</p></li><li><p>使用格式：写在变量名称之前或者变量名称之后；例如：++num，num++</p></li><li><p>使用方式：</p><ul><li>单独使用：不和其他操作混合，自己独立成为一个步骤</li><li>混合使用：和其他操作混合使用，例如与赋值混合或者打印操作混合等</li></ul></li><li><p>使用区别：</p><ul><li><p>在单独使用的时候；n++ 和 ++n 没有任何区别；</p></li><li><p>混合使用的时候，有【重大区别】</p><p>A. 如果是【前++】，那么变量【马上+1】，然后拿着结果进行使用, <font color= red>先加后用</font></p><p>B.如果是【后++】，那么首先使用原来的值进行使用，然后再将变量+1, <font color= red>先用后加</font></p></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Operator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 单独使用, 前++</span>        <span class="token operator">++</span>num1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 单独使用，后++</span>        num1<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 与打印操作混合使用</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 混合使用，前++，变量立刻变成21，再打印</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 21</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 混合使用，后++，首先使用变量本来的值进行操作（打印30），然后变量+1得到31</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 31</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token operator">--</span>num4<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 39</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 39</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num5 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> num5<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 50</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 49</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res3 <span class="token operator">=</span> <span class="token operator">++</span>x <span class="token operator">+</span> y<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 31</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 19</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a><font color=red>4、注意事项</font></h2><ul><li>一旦运算当中有不同类型的数据，那么结果将会是数据类型范围大的那种。</li><li><font color=red>任何数据类型和字符串进行连接的时候，结果都会变成字符串</font></li><li><font color=red>只有变量才有自增自减运算操作</font></li></ul><h1 id="二、赋值运算符"><a href="#二、赋值运算符" class="headerlink" title="二、赋值运算符"></a>二、赋值运算符</h1><table><thead><tr><th>赋值运算符</th><th></th></tr></thead><tbody><tr><td><code>=</code></td><td>等于号</td></tr><tr><td><code>+=</code></td><td>加等于</td></tr><tr><td><code>-=</code></td><td>减等于</td></tr><tr><td><code>*=</code></td><td>乘等于</td></tr><tr><td><code>/=</code></td><td>除等于</td></tr><tr><td><code>%=</code></td><td>取模等</td></tr></tbody></table><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p>赋值运算符，就是将符号右边的值，赋值给左边的变量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算方式： i = i + 5;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、比较运算符</h1><table><thead><tr><th>比较运算符</th><th></th></tr></thead><tbody><tr><td><code>==</code></td><td>比较符号两边数据是否相等，相等结果为true</td></tr><tr><td><code>&lt;</code></td><td>比较符号左边的数据是否小于右边的数据，如果小于结果为true</td></tr><tr><td><code>&gt;</code></td><td>比较符号左边的数据是否大于右边的数据，如果大于结果为true</td></tr><tr><td><code>&lt;=</code></td><td>比较符号左边的数据是否小于或等于右边的数据，如果是结果为true</td></tr><tr><td><code>&gt;=</code></td><td>比较符号左边的数据是否大于或等于右边的数据，如果是结果为true</td></tr><tr><td><code>!=</code></td><td>不等于符号，如果符号两边的数据不相等，结果为true</td></tr></tbody></table><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><p>比较运算符，是两个数据之间进行比较的运算，运算的结果都是布尔值<code>true</code>或者<code>false</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><ul><li>比较运算符的结果一定是一个boolean值，成立就是true，不成立就是false</li><li>如果进行多次判断，不能连着写，例如： 1 &lt; x &lt; 3；错误的</li></ul><h1 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h1><h2 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h2><table><thead><tr><th>逻辑运算符</th><th></th></tr></thead><tbody><tr><td><code>&amp;&amp;</code> 短路与</td><td>1、两边都是true，结果为true<br />2、一边为false， 结果为false<br />短路特点：符号左边是false，右边不再运算</td></tr><tr><td>`</td><td></td></tr><tr><td><code>!</code>取反</td><td>1、!true 结果为false<br />2、!false 结果为true</td></tr></tbody></table><p>逻辑运算符：是用来连接两个布尔类型结果的运算符，运算结果都是布尔值<code>true</code>或者<code>false</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        与（并且） &amp;&amp;         或（或者） ||        非（取反） |                与“&amp;&amp;” , 或“||” 具有短路效果：如果根据左边已经可以判断得到最终结果，那么右边的代码        将不再执行，从而节省一定的性能        */</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//短路效果：如果根据左边已经可以判断得到最终结果，那么右边的代码</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false &amp;&amp; ..., 根据左边已经能够判断出结果，所以不需要执行右边的代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>a <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> b  <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true || ...</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token operator">++</span>b <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 20</span><span class="token punctuation">}</span></code></pre><h2 id="2、注意事项-1"><a href="#2、注意事项-1" class="headerlink" title="2、注意事项"></a>2、注意事项</h2><ul><li>逻辑运算符只能用于boolean值</li><li>与、或需要左右各一个boolean值，但是取反只有一个boolean值即可</li><li>与、或两种运算符，如果有多个条件，可以连续写<ul><li>两个条件：A &amp;&amp; B</li><li>多个条件：A &amp;&amp; B &amp;&amp; C</li></ul></li></ul><h1 id="五、三元运算符"><a href="#五、三元运算符" class="headerlink" title="五、三元运算符"></a>五、三元运算符</h1><h2 id="1、三元运算符格式"><a href="#1、三元运算符格式" class="headerlink" title="1、三元运算符格式"></a>1、三元运算符格式</h2><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> 布尔类型表达式<span class="token operator">?</span> 结果<span class="token number">1</span><span class="token operator">:</span> 结果<span class="token number">2</span></code></pre><h2 id="2、三元运算符计算方式"><a href="#2、三元运算符计算方式" class="headerlink" title="2、三元运算符计算方式"></a>2、三元运算符计算方式</h2><ul><li>布尔类型表达式结果为true，三元运算符整体结果为结果1，赋值给变量</li><li>布尔类型表达式结果为false，三元运算符整体结果为结果2，赋值给变量</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token operator">?</span> a<span class="token operator">:</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为： "</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3、注意实现"><a href="#3、注意实现" class="headerlink" title="3、注意实现"></a>3、注意实现</h2><ul><li>必须同时保证表达式A 和表达式B都符合左侧数据类型的要求</li><li>三元运算符的结果必须被使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.数据类型转换</title>
      <link href="2021/03/06/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/06/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Java程序中要求参与的计算的数据，必须要保证数据的一致性，如果数据类型不一致将会发生类型的转换</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01DataType</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是个整数， 默认为int类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是个浮点数，默认为double类型</span>                <span class="token comment" spellcheck="true">// 左边是long 类型，右边是默认的int 类型，左右不一样</span>        <span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="一、自动类型转换"><a href="#一、自动类型转换" class="headerlink" title="一、自动类型转换"></a>一、自动类型转换</h1><p>一个<code>int</code>类型变量和一个<code>byte</code>类型的变量进行加法运算，结果会是什么数据类型？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>运算结果，变量的类型将是<code>int</code>类型，这就是出现了数据类型的自动类型转换现象。</p><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><ul><li><strong>自动转换</strong>：将<code>取值范围小的类型</code>转换为<code>取值范围大的类型</code>。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// byte x = b + i; // 报错</span>    <span class="token comment" spellcheck="true">// int 类型和 byte 类型运算，结果是int 类型</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><ul><li><p>代码不需要进行特殊处理，自动完成。</p></li><li><p><font color = red>数据范围从小到大, 数据范围与其对应的字节数不成正相关，即字节数越大数据范围不一定越大</font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 左边是long类型，右边是默认的int 类型</span><span class="token comment" spellcheck="true">// 改行代码表示将int --> long, 符合了数据范围从小到大的要求</span><span class="token comment" spellcheck="true">// 这一行代码发生了自动类型转换</span><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左边是double类型，右边是float类型，左右不一样</span><span class="token comment" spellcheck="true">// float --> double ,符合从小到大的规则</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">2.5F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左边是float类型，右边是long类型</span><span class="token comment" spellcheck="true">// long --> float,范围float类型更大，符合从小到大的规则</span><span class="token comment" spellcheck="true">// 发生自动类型转换</span><span class="token keyword">float</span> num3 <span class="token operator">=</span> 30L<span class="token punctuation">;</span></code></pre></li></ul><h1 id="二、强制类型转换"><a href="#二、强制类型转换" class="headerlink" title="二、强制类型转换"></a>二、强制类型转换</h1><p>将<code>1.5</code>赋值给<code>int</code>类型变量会发生什么？<font color = red>产生编译失败，无法赋值</font></p><p><code>double</code>类型内存8个字节，<code>int</code>类型内存4个字节。<code>1.5</code>是<code>double</code>类型，取值范围大于<code>int</code>。可以理解为<code>double</code>是8升水，<code>int</code>是4升水，不能把大水壶中的水直接放到小水壶中去。</p><p>想要赋值成功，只有通过强制类型转换，将<code>double</code>类型强制转换为<code>int</code>类型才能赋值。</p><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><p>将<code>取值范围大的类型</code>强制转换成<code>取值范围小的类型</code>.</p><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们手动执行。    </p><ul><li><p>格式：</p><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>数据类型<span class="token punctuation">)</span> 被转数据值</code></pre></li></ul><h2 id="2、特点-1"><a href="#2、特点-1" class="headerlink" title="2、特点"></a>2、特点</h2><ul><li>代码需要进行特殊的格式处理，不能自动完成</li><li>格式：范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据 </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02DataType</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 左边是 int 类型, 右边默认是int 类型,不会发生类型转换</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 左边是 int 类型, 右边是 long类型</span>        <span class="token comment" spellcheck="true">// long --> int, 数据范围不是从小到大</span>        <span class="token comment" spellcheck="true">// 不能发生自动类型转换</span>        <span class="token comment" spellcheck="true">//int num2 = 100L;</span>        <span class="token comment" spellcheck="true">//System.out.println(num2);</span>                <span class="token comment" spellcheck="true">// 进行强制类型转换</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> 100L<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a><font color = red>3、注意事项</font></h2><h4 id="（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出"><a href="#（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出" class="headerlink" title="（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出"></a>（1）、强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出</h4><ul><li>数据溢出</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 情况一</span><span class="token comment" spellcheck="true">// 右边虽然是long类型，但是经过强制类型转换后变成int类型，但是100这个数值并没有超过int类型的范围</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> 100L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 情况二</span><span class="token comment" spellcheck="true">//在这种情况下，右边是60亿，而默认的整数类型是int，其最大范围是约21个亿，这里就本身会产生一个错误，所以需要在其后面加上一个L，此时左边 int， 右边是 long，需要强制类型转换</span><span class="token comment" spellcheck="true">// int num2 = 6000000000;</span><span class="token comment" spellcheck="true">// 此时long强制转换为int类型，但是60亿已经超过了int类型范围， 发生数据溢出</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> 6000000000L<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出为 1705032704</span></code></pre><ul><li>精度损失</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// double --> int, 强制类型转换</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">3.99</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出为3，不是四舍五入，所有小数位都会被舍弃掉</span></code></pre><h4 id="（2）、byte-short-char这三种类型都可以发生数学运算，例如加法”-”"><a href="#（2）、byte-short-char这三种类型都可以发生数学运算，例如加法”-”" class="headerlink" title="（2）、byte/short/char这三种类型都可以发生数学运算，例如加法”+”"></a>（2）、byte/short/char这三种类型都可以发生数学运算，例如加法”+”</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 66</span></code></pre><h4 id="（3）、byte-short-char这三种类型在运算的时候，都会被首先提升为int类型，然后再计算"><a href="#（3）、byte-short-char这三种类型在运算的时候，都会被首先提升为int类型，然后再计算" class="headerlink" title="（3）、byte/short/char这三种类型在运算的时候，都会被首先提升为int类型，然后再计算"></a>（3）、byte/short/char这三种类型在运算的时候，都会被首先提升为<code>int</code>类型，然后再计算</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span> num3 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num4 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//byte + byte --> int + int --> int</span><span class="token comment" spellcheck="true">// byte res = num3 + num4; // 错误</span><span class="token keyword">int</span> res <span class="token operator">=</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">short</span> num6 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte + short --> int + int --> int</span><span class="token keyword">int</span> res1 <span class="token operator">=</span> num4 <span class="token operator">+</span> num6<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 强制类型转换</span><span class="token keyword">short</span> res2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num4 <span class="token operator">+</span> num6<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="（4）、boolean-类型不能发生数据类型转换"><a href="#（4）、boolean-类型不能发生数据类型转换" class="headerlink" title="（4）、boolean 类型不能发生数据类型转换"></a>（4）、boolean 类型不能发生数据类型转换</h4>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.常量、变量和数据类型</title>
      <link href="2021/03/05/3-%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/05/3-%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、常量"><a href="#一、常量" class="headerlink" title="一、常量"></a>一、常量</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>常量：是指在Java程序运行期间固定不变的数据</p><h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0， 1， 567， -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0， -0.1， 2.55</td></tr><tr><td>字符常量</td><td><font color=red>单引号引起来，只能写一个字符，必须有内容</font></td><td>‘a’, ‘ ‘, ‘好’</td></tr><tr><td>字符串常量</td><td><font color=red>双引号引起来，可以些多个字符，也可以不写</font></td><td>“A”, “Hello”, “你好”, “”</td></tr><tr><td>布尔常量</td><td>只有两个值</td><td>true, false</td></tr><tr><td>空常量</td><td>只有一个值</td><td>null</td></tr></tbody></table><h2 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01const</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XYZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 整数常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 小数常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(''); //两个单引号中间必须有且仅有一个字符，没有不行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 布尔常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// null</span>        <span class="token comment" spellcheck="true">// System.out.println(null);//空常量不能直接打印</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h1><h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><p>变量定义的格式包括三个要素：<code>数据类型</code>, <code>变量名</code>, <code>数据值</code>。</p><h2 id="2、格式"><a href="#2、格式" class="headerlink" title="2、格式"></a>2、格式</h2><pre class=" language-java"><code class="language-java">数据类型 变量名 <span class="token operator">=</span> 数据值<span class="token punctuation">;</span></code></pre><h2 id="3、实例-1"><a href="#3、实例-1" class="headerlink" title="3、实例"></a>3、实例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Variable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个变量</span>        <span class="token comment" spellcheck="true">// 格式： 数据类型 变量名</span>        <span class="token keyword">int</span> num1<span class="token punctuation">;</span>        num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 改变变量当中本来的数字</span>        num1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使用一步到位的格式来定义变量</span>        <span class="token comment" spellcheck="true">// 格式：数据类型 变量名称 = 数据值</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span> num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：右侧数值的范围不能超过左侧数据类型的范围</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// byte num4 = 400; // 右侧超出了byte的数据范围，错误</span>                <span class="token keyword">long</span> num4 <span class="token operator">=</span> 3000000000L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意整数默认的是int类型，如果需要long类型则需要加上L</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> num5 <span class="token operator">=</span> <span class="token number">2.5F</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h2><ul><li><p>如果创建多个变量，那么变量之间的名称不能重复</p></li><li><p>对于float和long类型来说，字母后缀F和L不能丢掉</p></li><li><p>如果使用byte或者short类型的变量，那么右侧的数据值范围不能超过左侧类型的范围</p></li><li><p>变量要先声明和赋值才能使用</p></li><li><p>变量的使用不能超过作用域的范围</p></li><li><p>可以通过一个语句来创建多个变量，但是一般情况不推荐这么写</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式二</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></code></pre></li></ul><p>这种写法也是可以的，一个程序有重复变量名。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03VariableNotice</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> num2 <span class="token operator">=</span> 20L<span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h1><h2 id="1、数据类型分类："><a href="#1、数据类型分类：" class="headerlink" title="1、数据类型分类："></a>1、数据类型分类：</h2><p>Java的数据类型分为两大类：</p><ul><li>基本数据类型：包括 <code>整数</code>（byte, short, int, long）, <code>浮点数</code>(float, double), <code>字符</code>(char), <code>布尔</code>(boolean)。</li><li>引用数据类型：包括<code>字符串</code>、 <code>类</code>、<code>数组</code>、<code>接口</code>、Lambda。</li></ul><h2 id="2、基本数据类型"><a href="#2、基本数据类型" class="headerlink" title="2、基本数据类型"></a>2、基本数据类型</h2><p>四类八种基本数据类型：</p><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int(默认)</td><td>4个字节</td><td>-2^31 ~ 2^31 -1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2^63 ~ 2^63 - 1</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4013E-45 ~ 3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double(默认)</td><td>8个字节</td><td>4.9E-324 ~ 1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0~65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true, false</td></tr></tbody></table><blockquote><p>Java中的默认类型：整数类型是<code>int</code>， 浮点类型是<code>double</code>.</p></blockquote><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h2><ul><li><p>字符串不是基本类型，而是引用类型；</p></li><li><p>浮点型可能只是一个近似值，并非精确的值；</p></li><li><p>数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节</p></li><li><p>浮点数当中默认类型是double，如果一定要使用float类型，需要加上一个后缀F；</p><p>如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.HelloWorld入门程序</title>
      <link href="2021/03/04/2-HelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>2021/03/04/2-HelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、程序开发步骤说明"><a href="#一、程序开发步骤说明" class="headerlink" title="一、程序开发步骤说明"></a>一、程序开发步骤说明</h1><p>Java程序开发三步骤：<strong>编写、编译、运行</strong></p><p><img src="/images/3_Java_Develop_Step.jpg" alt="1_Java_Develop_Step"></p><h1 id="二、编写Java源程序"><a href="#二、编写Java源程序" class="headerlink" title="二、编写Java源程序"></a>二、编写Java源程序</h1><ol><li>在某一目录下（例如：D:\java_1）创建一个文本文件，将其完整的文件名修改为<strong>HelloWorld.java</strong> , 其中文件名位<strong>HelloWorld</strong>，后面的后缀名必须是    <strong>.java</strong> 。</li><li>用记事本打开。</li><li>在文件中键入文本并保存，代码如下：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>文件名必须是<strong>HelloWorld</strong>， 保证文件名和类的名字是一致的，注意大小写。</p></blockquote><p>第一个<strong>HelloWorld</strong> 源程序就编写好了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<strong>Java源文件</strong>编译成JVM可以看懂的<strong>字节码文件</strong>。</p><h1 id="三、编译Java源文件"><a href="#三、编译Java源文件" class="headerlink" title="三、编译Java源文件"></a>三、编译Java源文件</h1><p>在DOS命令行中，进入Java源文件，使用<strong>javac</strong>命令进行编译。</p><p>命令：</p><pre class=" language-bash"><code class="language-bash">javac Java源文件名.后缀名</code></pre><p>例如：</p><pre class=" language-bash"><code class="language-bash">javac HelloWorld.java</code></pre><p><img src="/images/4_Java_compile.jpg" alt="2_Java_compile"></p><p>编译成功后，命令行没有任何提示。打开其Java源文件目录，发现产生一个新的文件<strong>HelloWorld.class</strong>，该文件就是编译后的文件，是java的可运行文件，称为<font color = red size = 04>字节码文件</font>，有了字节码文件，就可以运行程序了。</p><blockquote><p>Java源文件的编译工具是 <strong>javac.exe</strong>.</p></blockquote><h1 id="四、运行Java程序"><a href="#四、运行Java程序" class="headerlink" title="四、运行Java程序"></a>四、运行Java程序</h1><p>在DOS命令行中，进入Java源文件的目录，使用<strong>java</strong>命令进行运行。</p><p>命令：</p><pre class=" language-bash"><code class="language-bash">java 类名字</code></pre><p>举例：</p><pre class=" language-bash"><code class="language-bash">java HelloWorld</code></pre><blockquote><p>上面命令中<font color=red size = 6> Java  HelloWorld 后面不要加.class</font></p><p>Java程序**.class** 文件的运行工具是<strong>java.exe</strong>,。</p></blockquote><h1 id="五、有关说明"><a href="#五、有关说明" class="headerlink" title="五、有关说明"></a>五、有关说明</h1><h2 id="1、编译和运行时两回事"><a href="#1、编译和运行时两回事" class="headerlink" title="1、编译和运行时两回事"></a>1、编译和运行时两回事</h2><ul><li>编译：是指将我们写的Java源文件翻译为JVM认识的class文件，在这个过程中，<strong>javac</strong>编译器会检查我们所写的程序是否有错误，有错误就提示出来，如果没有错误就会编译成功。</li><li>运行：是指将<strong>class文件</strong>交给JVM去运行，此时JVM就会执行我们编写的程序了。</li></ul><h2 id="2、有关main方法"><a href="#2、有关main方法" class="headerlink" title="2、有关main方法"></a>2、有关main方法</h2><ul><li>main方法：称为主方法，写法是固定格式不可以更改。main方法是程序的入口点或者起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始运行。</li></ul><h1 id="六、添加注释comment"><a href="#六、添加注释comment" class="headerlink" title="六、添加注释comment"></a>六、添加注释comment</h1><ul><li><p>注释：就是对代码的解释和说明，其目的是让人们能够更加轻松的了解代码，不影响程序的运行和编译。</p></li><li><p>Java中有单行注释和多行注释</p><p>​    $\nabla$ 单行注释以 <font color=orange><strong>//注释</strong> </font>，换行结束</p><p>​    $\nabla$ 多行注释以 <font color=orange><strong>/* 注释 */</strong> </font>，以*/* <em>开头吗，以</em> * <em>/</em>  结束</p></li></ul><h1 id="七、关键字keywords"><a href="#七、关键字keywords" class="headerlink" title="七、关键字keywords"></a>七、关键字keywords</h1><ul><li><p>关键字：是指程序中，Java已经定义好的单词，具有特殊含义。</p><p>​     $\nabla$ HelloWorld 案例中，出现的关键字有<strong>public</strong>、<strong>class</strong>、<strong>static</strong>、<strong>void</strong> 等，这些单词已经被Java定义好，全部都是小写字母。</p></li></ul><h1 id="八、标识符"><a href="#八、标识符" class="headerlink" title="八、标识符"></a><font color = red>八、标识符</font></h1><h2 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h2><ul><li>是指在程序中，我们自己定义内容。例如类的名字，方法的名字和变量的名字等等，都是标识符。</li></ul><h2 id="2、命名规则：硬性要求"><a href="#2、命名规则：硬性要求" class="headerlink" title="2、命名规则：硬性要求"></a><font color = red>2、命名规则：硬性要求</font></h2><ul><li>标识符可以包含英文字母26个（区分大小写）、0-9、$和_ </li><li>标识符不能以数字开头</li><li>标识符不能是关键字</li></ul><h2 id="3、命名规范：软性建议"><a href="#3、命名规范：软性建议" class="headerlink" title="3、命名规范：软性建议"></a><font color = red>3、命名规范：软性建议</font></h2><ul><li>类名规范：首字母大写，后面的每个单词首字母大写（大驼峰式）</li><li>方法名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li><li>变量名规范：全部小写</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Java语言开发环境</title>
      <link href="2021/03/04/1-Java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2021/03/04/1-Java%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Java-虚拟机——JVM"><a href="#一、Java-虚拟机——JVM" class="headerlink" title="一、Java 虚拟机——JVM"></a>一、Java 虚拟机——JVM</h1><ul><li>JVM（Java Virtual Machine）：Java虚拟机，简称为JVM，是运行所有Javach程序的假象计算机，是Java程序的运行环境，是Java最具吸引力的特征之一。我们编写的Java代码，都运行在JVM之上。</li><li>跨平台：任何软件的运行，都必须要运行在操作系统上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特征。该特征由JVM实现，我们编写的程序运行在JVM上，而JVM运行在操作系统上。<img src="/images/1_JVM.jpg" alt="1_JVM"></li></ul><p>如同所示，Java的虚拟机本身不不具备跨平台性，每个操作系统都有不同版本的虚拟机。</p><h1 id="二、JRE和JDK"><a href="#二、JRE和JDK" class="headerlink" title="二、JRE和JDK"></a>二、JRE和JDK</h1><ul><li> JRE（Java Runtime Entironment）: 是Java程序的运行时环境，包括JVM和运行时所需要的核心类库。</li><li>JDK（Java Development Kit）：是Java程序开发工具包，包括JRE和开发人员使用的工具。</li></ul><p>我们想要运行一个已有的Java程序，那么需要安装 <em>JRE</em> 即可。</p><p>我们想要开发一个全新的Java程序，那么需要安装 <em>JDK</em>。</p><p>有关JVM，JRE，JDK三者的关系：</p><p><img src="/images/2_JVM_JRE_JDK.jpg" alt="2_JVM_JRE_JDK"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/03/hello-world/"/>
      <url>2021/03/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
